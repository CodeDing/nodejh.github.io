<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on nodejh</title>
    <link>http://nodejh.com/categories/javascript/index.xml</link>
    <description>Recent content in Javascript on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Is JavaScript a call by reference or call by value language?</title>
      <link>http://nodejh.com/post/Is-JavaScript-a-pass-by-reference-or-pass-by-value-language/</link>
      <pubDate>Sat, 18 Feb 2017 11:07:14 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Is-JavaScript-a-pass-by-reference-or-pass-by-value-language/</guid>
      <description>

&lt;h2 id=&#34;1-例子&#34;&gt;1. 例子&lt;/h2&gt;

&lt;p&gt;先来看两个个来自于 《JavaScript 高级程序设计》P70-P71 的两个例子。&lt;/p&gt;

&lt;h4 id=&#34;1-1-基本类型参数传递&#34;&gt;1.1. 基本类型参数传递&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;function addTen(num) {
  num += 10;
  return num;
}

var count = 20;
var result = addTen(count);
alert(count); // 20, 没有变化
alert(result); // 30
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;书上解释说，JavaScript 参数传递都是按值传参。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以传递给 &lt;code&gt;addTen&lt;/code&gt; 函数的值是 &lt;code&gt;20&lt;/code&gt; 这个值，所以函数执行结束原始变量 &lt;code&gt;count&lt;/code&gt; 并不会改变。&lt;/p&gt;

&lt;h4 id=&#34;1-2-引用类型参数传递&#34;&gt;1.2. 引用类型参数传递&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;function setName(obj) {
  obj.name = &#39;Nicholas&#39;;
  obj = new Object();
  obj.name = &#39;Greg&#39;;
}

var person = new Object();
setName(person);
alert(person.name); // Nicholas
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为什么结果是 &lt;code&gt;Nicholas&lt;/code&gt; 呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2017-02-17-Is-JavaScript-a-pass-by-reference-or-pass-by-value-language-1.png&#34; alt=&#34;变量存储方式&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;疑问：如果是传值，那应该是把 person 变量的值（也就是一个指向堆内存中对象的指针）传递到函数中，&lt;code&gt;obj.name = &#39;Greg&#39;;&lt;/code&gt; 改变了堆内存中对象的属性，为什么 &lt;code&gt;person.name&lt;/code&gt; 还是 &lt;code&gt;Nicholas&lt;/code&gt; ？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;2-传值还是传引用&#34;&gt;2. 传值还是传引用？&lt;/h2&gt;

&lt;p&gt;让我们再将上面两个例子综合为下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function changeStuff(a, b, c) {
  a = a * 10;
  b.item = &amp;quot;changed&amp;quot;;
  c = {item: &amp;quot;changed&amp;quot;};
}

var num = 10;
var obj1 = {item: &amp;quot;unchanged&amp;quot;};
var obj2 = {item: &amp;quot;unchanged&amp;quot;};

changeStuff(num, obj1, obj2);

console.log(num);
console.log(obj1.item);    
console.log(obj2.item);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终的输出结果是：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10
changed
unchanged
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以 JS 到底是传值调用还是传引用调用呢？要弄清楚这个问题，首先我们要明白到底什么是&lt;strong&gt;传值调用（Call-ny-value）&lt;/strong&gt;和&lt;strong&gt;传引用调用（Call-by-reference）&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;2-1-传值调用-pass-by-value&#34;&gt;2.1. 传值调用（Pass by value）&lt;/h4&gt;

&lt;p&gt;在传值调用中，传递给函数参数是函数被调用时所传实参的拷贝。在传值调用中实际参数被求值，其值被绑定到函数中对应的变量上（通常是把值复制到新内存区域）。&lt;/p&gt;

&lt;p&gt;即 &lt;code&gt;changeStuff&lt;/code&gt; 的参数 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 是 &lt;code&gt;num1&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 的拷贝。所以无论 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 怎么变化，&lt;code&gt;num1&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 都保持不变。&lt;/p&gt;

&lt;p&gt;问题就在于 &lt;code&gt;obj1&lt;/code&gt; 变了。&lt;/p&gt;

&lt;h4 id=&#34;2-2-传引用调用-pass-by-reference&#34;&gt;2.2. 传引用调用（Pass by reference）&lt;/h4&gt;

&lt;p&gt;在传引用调用调用中，传递给函数的是它的实际参数的隐式引用而不是实参的拷贝。通常函数能够修改这些参数（比如赋值），而且改变对于调用者是可见的。&lt;/p&gt;

&lt;p&gt;也就是说 &lt;code&gt;changeStuff&lt;/code&gt; 函数内的 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 都分别与 &lt;code&gt;num&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 指向同一块内存，但不是其拷贝。函数内对 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 所做的任何修改，都将反映到 &lt;code&gt;num&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 上 。&lt;/p&gt;

&lt;p&gt;问题就在于 &lt;code&gt;num&lt;/code&gt; 和 &lt;code&gt;obj2&lt;/code&gt; 没变。&lt;/p&gt;

&lt;p&gt;从上面的代码可以看出，JavaScript 中函数参数的传递方式既不是传值，也不是传引用。主要问题出在 JS 的引用类型上面。&lt;/p&gt;

&lt;p&gt;JS 引用类型变量的值是一个指针，指向堆内存中的实际对象。&lt;/p&gt;

&lt;h4 id=&#34;2-3-传共享调用-call-by-sharing&#34;&gt;2.3. 传共享调用（Call by sharing）&lt;/h4&gt;

&lt;p&gt;还有一种求值策略叫做&lt;a href=&#34;http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy/#call-by-sharing&#34;&gt;传共享调用（Call-by-sharing/Call by object/Call by object-sharing）&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;传共享调用和传引用调用的不同之处是，该求值策略传递给函数的参数是对象的引用的拷贝，即对象变量指针的拷贝。&lt;/p&gt;

&lt;p&gt;也就是说， &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 三个变量的值是 &lt;code&gt;num&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 的指针的拷贝。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 的值分别与 &lt;code&gt;num&lt;/code&gt; &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 的值指向同一个对象。函数内部可以对  &lt;code&gt;a&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 进行修改可重新赋值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function changeStuff(a, b, c) {
  a = a * 10; // 对 a 赋值，修改 a 的指向，新的值是 a * 10
  b.item = &amp;quot;changed&amp;quot;; // 因为 b 与 obj1 指向同一个对象，所以这里会修改原始对象 obj1.item 的内容
  c = {item: &amp;quot;changed&amp;quot;}; // 对 c 重新赋值，修改 c 的指向，其指向的对象内容是 {item: &amp;quot;changed&amp;quot;}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-代码分析&#34;&gt;3 代码分析&lt;/h2&gt;

&lt;p&gt;接下来让我们再来分析一下代码。&lt;/p&gt;

&lt;h4 id=&#34;3-1-变量初始化&#34;&gt;3.1 变量初始化&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;var num = 10;
var obj1 = {item: &amp;quot;unchanged&amp;quot;};
var obj2 = {item: &amp;quot;unchanged&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2017-02-19-Is-JavaScript-a-pass-by-reference-or-pass-by-value-language-2.png&#34; alt=&#34;变量初始化&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-2-调用函数&#34;&gt;3.2 调用函数&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;changeStuff(num, obj1, obj2);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2017-02-19-Is-JavaScript-a-pass-by-reference-or-pass-by-value-language-3.png&#34; alt=&#34;调用函数&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到，变量 &lt;code&gt;a&lt;/code&gt; 的值就是 &lt;code&gt;num&lt;/code&gt; 值的拷贝，变量 &lt;code&gt;b&lt;/code&gt; &lt;code&gt;c&lt;/code&gt; 分别是 &lt;code&gt;obj1&lt;/code&gt; &lt;code&gt;obj2&lt;/code&gt; 的指针的拷贝。&lt;/p&gt;

&lt;p&gt;函数的参数其实就是函数作用域内部的变量，函数执行完之后就会销毁。&lt;/p&gt;

&lt;h4 id=&#34;3-3-执行函数体&#34;&gt;3.3 执行函数体&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;a = a * 10;
b.item = &amp;quot;changed&amp;quot;;
c = {item: &amp;quot;changed&amp;quot;};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2017-02-19-Is-JavaScript-a-pass-by-reference-or-pass-by-value-language-5.png&#34; alt=&#34;执行函数体&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，变量 &lt;code&gt;a&lt;/code&gt; 的值的改变，并不会影响变量 &lt;code&gt;num&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而 &lt;code&gt;b&lt;/code&gt; 因为和 &lt;code&gt;obj1&lt;/code&gt; 是指向同一个对象，所以使用 &lt;code&gt;b.item = &amp;quot;changed&amp;quot;;&lt;/code&gt; 修改对象的值，会造成 &lt;code&gt;obj1&lt;/code&gt; 的值也随之改变。&lt;/p&gt;

&lt;p&gt;由于是对 &lt;code&gt;c&lt;/code&gt; 重新赋值了，所以修改 &lt;code&gt;c&lt;/code&gt; 的对象的值，并不会影响到 &lt;code&gt;obj2&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;4-结论&#34;&gt;4. 结论&lt;/h2&gt;

&lt;p&gt;从上面的例子可以看出，对于 JS 来说：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本类型是传值调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型传共享调用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;传值调用本质上传递的是变量的值的拷贝。&lt;/p&gt;

&lt;p&gt;传共享调用本质上是传递对象的指针的拷贝，其指针也是变量的值。所以传共享调用也可以说是传值调用。&lt;/p&gt;

&lt;p&gt;所以《JavaScript 高级程序设计》说 &lt;strong&gt;JavaScript 参数传递都是按值传参&lt;/strong&gt; 也是有道理的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Evaluation_strategy&#34;&gt;Evaluation strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5&#34;&gt;求值策略&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dmitrysoshnikov.com/ecmascript/chapter-8-evaluation-strategy&#34;&gt;ECMA-262-3 in detail. Chapter 8. Evaluation strategy.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language&#34;&gt;Is JavaScript a pass-by-reference or pass-by-value language?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/simongong/js-stackoverflow-highest-votes/blob/master/questions21-30/parameter-passed-by-value-or-reference.md&#34;&gt;parameter passed by value or reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bosn.me/js/js-call-by-sharing/&#34;&gt;JS是按值传递还是按引用传递?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>