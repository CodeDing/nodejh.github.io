<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on nodejh</title>
    <link>http://nodejh.com/categories/database/</link>
    <description>Recent content in Database on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Feb 2017 20:26:33 +0800</lastBuildDate>
    <atom:link href="http://nodejh.com/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Create Auto Increment Column in Oracle</title>
      <link>http://nodejh.com/post/How-to-Create-Auto-Increment-Column-in-Oracle/</link>
      <pubDate>Mon, 20 Feb 2017 20:26:33 +0800</pubDate>
      
      <guid>http://nodejh.com/post/How-to-Create-Auto-Increment-Column-in-Oracle/</guid>
      <description>

&lt;p&gt;如果你经常使用 MySQL，你肯定对 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 非常熟悉，因为经常要用到它。&lt;/p&gt;

&lt;h2 id=&#34;一-什么是自增列&#34;&gt;一、什么是自增列 ？&lt;/h2&gt;

&lt;p&gt;自增列是数据库中值随插入的每个行自动增加的一列。它最常用于主键或 ID 字段，这样每次增加一行时，不用指该字段的值，它就会自动增加，而且是唯一的。&lt;/p&gt;

&lt;p&gt;当在 MySQL 中定义列时，我们可以指定一个名为 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 的参数。然后，每当将新值插入此表中时，放入此列的值比最后一个值加 &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但很不幸，Oracle 没有 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 功能。 那要如何在Oracle中做到这一点呢？&lt;/p&gt;

&lt;h2 id=&#34;二-在-oracle-11g-中设置自增字段&#34;&gt;二、在  Oracle 11g 中设置自增字段&lt;/h2&gt;

&lt;h3 id=&#34;1-创建表&#34;&gt;1. 创建表&lt;/h3&gt;

&lt;p&gt;首先创建一张用于测试的表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE &amp;quot;TEST&amp;quot; (
    ID NUMBER(11) PRIMARY KEY,
    NAME VARCHAR2(50BYTE) NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-创建序列&#34;&gt;2. 创建序列&lt;/h3&gt;

&lt;p&gt;然后创建一个名为 &lt;code&gt;TEST_ID_SEQ&lt;/code&gt; 的序列（序列名称自己随意设定）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE SEQUENCE TEST_ID_SEQ
INCREMENT BY 1
START WITH 100
MAXVALUE 999999999
NOCYCLE
NOCACHE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要删除序列，可以使用下面的 SQL 命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP SEQUENCE TEST_ID_SEQ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对 &lt;code&gt;SEQUENCE&lt;/code&gt; 的一些说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INCREMENT BY&lt;/code&gt; 用于指定序列增量（默认值：1），如果指定的是正整数，则序列号自动递增，如果指定的是负数，则自动递减。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START WITH&lt;/code&gt; 用于指定序列生成器生成的第一个序列号，当序列号顺序递增时默认值为序列号的最小值，当序列号顺序递减时默认值为序列号的最大值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAXVALUE&lt;/code&gt; 用于指定序列生成器可以生成的组大序列号（必须大于或等于 &lt;code&gt;START WITH&lt;/code&gt;，并且必须大于 &lt;code&gt;MINVALUE&lt;/code&gt;），默认为 &lt;code&gt;NOMAXVALUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINVALUE&lt;/code&gt; 用于指定序列生成器可以生成的最小序列号（必须小于或等于 &lt;code&gt;START WITH&lt;/code&gt;，并且必须小于 &lt;code&gt;MAXVALUE&lt;/code&gt;），默认值为 &lt;code&gt;NOMINVALUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CYCLE&lt;/code&gt; 用于指定在达到序列的最大值或最小值之后是否继续生成序列号，默认为 &lt;code&gt;NOCYCLE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHE&lt;/code&gt; 用于指定在内存中可以预分配的序列号个数（默认值：20）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到这一步其实就已经可以实现字段自增，只要插入的时候，将 ID 的值设置为序列的下一个值 &lt;code&gt;TEST_ID_SEQ.NEXTVAL&lt;/code&gt; 就可以了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name1&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name2&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name3&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了简化插入操作，我们还可以创建一个触发器，当将数据插入到 &amp;ldquo;TEST&amp;rdquo; 表的时候，自动将最新的 ID 插入进去。&lt;/p&gt;

&lt;h3 id=&#34;3-创建触发器&#34;&gt;3. 创建触发器&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE TRIGGER TEST_ID_SEQ_TRG
BEFORE INSERT ON &amp;quot;TEST&amp;quot;
FOR EACH ROW
WHEN (NEW.&amp;quot;ID&amp;quot; IS NULL)
BEGIN
  SELECT TEST_ID_SEQ.NEXTVAL
  INTO :NEW.&amp;quot;ID&amp;quot;
  FROM DUAL;
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话，每次写插入语句，只需要将 &lt;code&gt;ID&lt;/code&gt; 字段的值设置为 &lt;code&gt;NULL&lt;/code&gt; 它就会自动递增了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name4&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name5&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name6&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
105	name6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-一些值得注意的地方&#34;&gt;4. 一些值得注意的地方&lt;/h3&gt;

&lt;h4 id=&#34;4-1-插入指定-id&#34;&gt;4.1 插入指定 ID&lt;/h4&gt;

&lt;p&gt;如果某条插入语句指定了 &lt;code&gt;ID&lt;/code&gt; 的值如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (1000, &#39;name1001&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
1000	name1001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么下次 &lt;code&gt;ID&lt;/code&gt; 还是会在原来的基础上继续增加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name1001&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
1000	name1001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但当序列的值到了 &lt;code&gt;1000&lt;/code&gt; 的时候，如果 &lt;code&gt;ID&lt;/code&gt; 允许重复，就会有两行记录 &lt;code&gt;ID&lt;/code&gt; 都为 &lt;code&gt;1000&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但如果 &lt;code&gt;ID&lt;/code&gt; 设置为了主键，如本文的例子 &lt;code&gt;ID NUMBER(11) PRIMARY KEY&lt;/code&gt;，则插入就会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error : ORA-00001: unique constraint (SOFTWARE.SYS_C0014995) violated
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-2-字段加引号&#34;&gt;4.2 字段加引号&lt;/h4&gt;

&lt;p&gt;在 SQL 语句中，字段最好都加上引号，不然可能会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error : ORA-00900: invalid SQL statement
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ORA-24344: Success with Compilation Error
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-3-squence&#34;&gt;4.3 SQUENCE&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 返回的是初始值；随后的 &lt;code&gt;NEXTVAL&lt;/code&gt; 会自动增加 &lt;code&gt;INCREMENT BY&lt;/code&gt; 对应的值，然后返回增加后的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CURRVAL&lt;/code&gt; 总是返回当前 &lt;code&gt;SEQUENCE&lt;/code&gt; 的值，但是在第一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 初始化之后才能使用 &lt;code&gt;CURRVAL&lt;/code&gt; ，否则会出错。&lt;/li&gt;
&lt;li&gt;一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 会增加一次 &lt;code&gt;SEQUENCE&lt;/code&gt; 的值，所以如果在同一个语句里面使用多个NEXTVAL，其值就是不一样的。&lt;/li&gt;
&lt;li&gt;如果指定 &lt;code&gt;CACHE&lt;/code&gt; 值，Oracle 就可以预先在内存里面放置一些 &lt;code&gt;SEQUENCE&lt;/code&gt;，这样存取的快些。 &lt;code&gt;CACHE&lt;/code&gt; 里面的取完后，Oracle 自动再取一组到 &lt;code&gt;CACHE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;但使用 &lt;code&gt;CACHE&lt;/code&gt; 或许会跳号，比如数据库突然不正常关闭（&lt;code&gt;shutdown abort&lt;/code&gt;)， &lt;code&gt;CACHE&lt;/code&gt; 中的 &lt;code&gt;SEQUENCE&lt;/code&gt; 就会丢失。所以可以在 &lt;code&gt;CREATE SEQUENCE&lt;/code&gt; 的时候用 &lt;code&gt;NOCACHE&lt;/code&gt; 防止这种情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-4-性能&#34;&gt;4.4 性能&lt;/h4&gt;

&lt;p&gt;在数据库操作中，触发器的使用耗费系统资源相对较大。如果对于表容量相对较小的表格我们可以忽略触发器带来的性能影响。&lt;/p&gt;

&lt;p&gt;考虑到大表操作的性能问题，需要尽可能的减少触发器的使用。对于以上操作，就可以抛弃触发器的使用，直接手动调用序列函数即可，但这样可能在程序维护上稍微带来一些不便。&lt;/p&gt;

&lt;h2 id=&#34;三-在-oracle-12c-中设置自增字段&#34;&gt;三、在 Oracle 12c 中设置自增字段&lt;/h2&gt;

&lt;p&gt;在 Oracle 12c 中设置自增字段就简单多了，因为 ORacle 12c 提供了 &lt;code&gt;IDENTITY&lt;/code&gt; 属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE &amp;quot;TEST&amp;quot; (
    ID NUMBER(11) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NAME VARCHAR2(50BYTE) NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就搞定了！和 MySQL 一样简单！🤣🤣🤣&lt;/p&gt;

&lt;h2 id=&#34;四-总结&#34;&gt;四、总结&lt;/h2&gt;

&lt;p&gt;所以如上所属，在 Oracle 中设置自增字段，需要根据不同的版本使用不同的方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 Oracle 11g 中，需要先创建序列（SQUENCE）再创建一个触发器（TRIGGER）。&lt;/li&gt;
&lt;li&gt;在 Oracle 12c 中，只需要使用 &lt;code&gt;IDENTITY&lt;/code&gt; 属性就可以了。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issues &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/33&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using SQL Plus on Oracle</title>
      <link>http://nodejh.com/post/Using-SQL-Plus-on-Oracle/</link>
      <pubDate>Fri, 17 Feb 2017 15:03:43 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Using-SQL-Plus-on-Oracle/</guid>
      <description>

&lt;p&gt;SQL *Plus 是基于命令行的 Oracle 管理工具，可以用来执行 &lt;code&gt;SQL&lt;/code&gt;、&lt;code&gt;PL/SQL&lt;/code&gt;、 和 &lt;code&gt;SQL*Plus&lt;/code&gt; 命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持查询、插入和更新数据&lt;/li&gt;
&lt;li&gt;执行 &lt;code&gt;PL/SQL&lt;/code&gt; 程序&lt;/li&gt;
&lt;li&gt;查看表和对象的定义&lt;/li&gt;
&lt;li&gt;开发和执行批处理脚本&lt;/li&gt;
&lt;li&gt;进行数据库管理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;登录-sql-plus&#34;&gt;登录 SQL *PLUS&lt;/h2&gt;

&lt;p&gt;直接登录，输入命令后会提示输入用户名密码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用用户名和密码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus [username]/[user_password]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;操作系统权限认证的 Oracle SYS 管理员登陆：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不在终端暴露密码登录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus /nolog
SQL&amp;gt; conn [username]/[user_password]
# 或者
SQL &amp;gt; conn / as sysdba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;退出登录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;数据库信息&#34;&gt;数据库信息&lt;/h2&gt;

&lt;h4 id=&#34;查看数据库名&#34;&gt;查看数据库名&lt;/h4&gt;

&lt;p&gt;通常情况了我们称的 &lt;code&gt;数据库&lt;/code&gt;，并不仅指物理的数据集合，而是物理数据、内存、操作系统进程的组合体。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; select name from v$database; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查询当前数据库实例名&#34;&gt;查询当前数据库实例名&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;实例是访问Oracle数据库所需的一部分计算机内存和辅助处理后台进程，是由进程和这些进程所使用的内存(SGA)所构成一个集合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; select instance_name from v$instance;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据库实例名用于对外部连接。在操作系统中要取得与数据库的联系，必须使用数据库实例名。比如我们作开发，要连接数据库，就得连接数据库实例名，&lt;code&gt;orcl&lt;/code&gt; 就为数据库实例名：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jdbc:oracle:thin:@localhost:1521:orcl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一个数据库可以有多个实例，在作数据库服务集群的时候可以用到。&lt;/p&gt;

&lt;h2 id=&#34;用户管理&#34;&gt;用户管理&lt;/h2&gt;

&lt;p&gt;Oracle 使用 &lt;code&gt;PROFILE&lt;/code&gt; 文件对用户访问资源的权限进行控制。&lt;/p&gt;

&lt;p&gt;若不做特殊指定，创建用户时用户默认使用的 &lt;code&gt;PROFILE&lt;/code&gt; 就是 &lt;code&gt;DEFAULT&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;查看当前用户：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; show user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看数据库用户：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; select * from dba_users;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;解锁用户&#34;&gt;解锁用户&lt;/h4&gt;

&lt;p&gt;默认当密码输错 10 次之后，用户就会被锁定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ORA-28000: the account is locked
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候就需要管理员来解锁：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus / as sysdba
SQL&amp;gt; alter user [username] account unlock;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有解锁肯定就有锁定：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; alter user [username] account lock;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;密码错误次数&#34;&gt;密码错误次数&lt;/h4&gt;

&lt;p&gt;当然，也可以自己修改最大密码错误次数，最大错误次数存储在 &lt;code&gt;dba_profiles&lt;/code&gt; 表中。&lt;/p&gt;

&lt;p&gt;首先根据 username 查看用户使用的 &lt;code&gt;PROFILE&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT PROFILE FROM DBA_USERS WHERE USERNAME=&#39;[username]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后根据 username 以及查询到的 &lt;code&gt;PROFILE&lt;/code&gt; 查看该用户的最大密码错误次数 &lt;code&gt;FAILED_LOGIN_ATTEMPTS&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT * FROM DBA_PROFILES WHERE PROFILE=&#39;DEFAULT&#39; AND RESOURCE_NAME=&#39;FAILED_LOGIN_ATTEMPTS&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将错误次数修改为无限次：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; ALTER PROFILE DEFAULT LIMIT FAILED_LOGIN_ATTEMPTSUNLIMITED;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;密码有效期&#34;&gt;密码有效期&lt;/h4&gt;

&lt;p&gt;Oracle 11g 默认用户每三个月（180 天）就要修改一次密码，快到密码过期时间就会提醒：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ORA-28002: the password will expire within 7 days
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里同样要先查找到 &lt;code&gt;PROFILE&lt;/code&gt; 再查看用户密码剩余过期时间：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT * FROM DBA_PROFILES WHERE PROFILE=&#39;DEFAULT&#39; AND RESOURCE_NAME=&#39;PASSWORD_LIFE_TIME&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改密码有效期（不受限）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIMEUNLIMITED;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;设置密码过期：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; alter user [username] password expire;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;修改密码&#34;&gt;修改密码&lt;/h4&gt;

&lt;p&gt;修改当前登录用户密码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改某个用户的密码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; alter user [username] identified by [password];
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;表管理&#34;&gt;表管理&lt;/h2&gt;

&lt;p&gt;Oracle 的表都是存储在表空间里面的。创建表之前需要先创建一个表空间。&lt;/p&gt;

&lt;h4 id=&#34;查看用户所拥有的表&#34;&gt;查看用户所拥有的表&lt;/h4&gt;

&lt;p&gt;查看用户所拥有的表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT TABLE_NAME FROM USER_TABLES; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看用户可存取的表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT TABLE_NAME FROM ALL_TABLES; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数据库中所有表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT TABLE_NAME FROM DBA_TABLES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看表空间&#34;&gt;查看表空间&lt;/h4&gt;

&lt;p&gt;查看表空间详细数据文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; SELECT FILE_NAME,TABLESPACE_NAME from DBA_DATA_FILES;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建表空间&#34;&gt;创建表空间&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;create tablespace [表空间名称]
datafile [表空间数据文件路径 ]
size [表空间大小]
autoextend on;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; create tablespace SoftwareManagement
  2  datafile &#39;/data/oracle/oradata/orcl/SoftwareManagement.dbf&#39;
  3  size 50m
  4  autoextend on;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建新用户&#34;&gt;创建新用户&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;CREATE USER [用户名]  
IDENTIFIED BY [密码]  
DEFAULT TABLESPACE [表空间] (默认USERS)  
TEMPORARY TABLESPACE [临时表空间] (默认TEMP)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; create USER software
  2  identified by 123456
  3  default tablespace Softwaremanagement;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;分配权限&#34;&gt;分配权限&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; GRANT CONNECT TO [username];  
SQL&amp;gt; GRANT RESOURCE TO [username];  
SQL&amp;gt; GRANT DBA TO [username];  -- DBA为最高级权限，可以创建数据库、表等。 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里，数据库中的表空间、用户以及用户权限都创建并分配好了，接下来用户就可以在自己的表空间中创建表，然后进行开发。&lt;/p&gt;

&lt;h2 id=&#34;权限管理&#34;&gt;权限管理&lt;/h2&gt;

&lt;p&gt;在给用户分配权限的时候，分配了 &lt;code&gt;CONNECT&lt;/code&gt;、&lt;code&gt;RESOURCE&lt;/code&gt; 权限给用户。这两个权限到底是什么呢？&lt;/p&gt;

&lt;h4 id=&#34;oracle中的权限&#34;&gt;oracle中的权限&lt;/h4&gt;

&lt;p&gt;Oracle 中的权限分为两类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;系统权限：系统规定用户使用数据库的权限，系统权限是对用户而言。&lt;/li&gt;
&lt;li&gt;实体权限：某种权限的用户对其他用户的表或视图的存取权限，是针对表或者视图而言。如 &lt;code&gt;select&lt;/code&gt;、&lt;code&gt;update&lt;/code&gt;、&lt;code&gt;insert&lt;/code&gt;、&lt;code&gt;delete&lt;/code&gt;、&lt;code&gt;alter&lt;/code&gt;、&lt;code&gt;index&lt;/code&gt;、&lt;code&gt;all&lt;/code&gt;，其中 &lt;code&gt;all&lt;/code&gt; 包含所有的实体权限。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;系统权限分类&#34;&gt;系统权限分类&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;DBA：拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。&lt;/li&gt;
&lt;li&gt;RESOURCE：拥有resource权限的用户只可以创建实体，不可以创建数据库结构。&lt;/li&gt;
&lt;li&gt;CONNECT：拥有connect权限的用户只可以登录oracle，不可以创建实体，不可以创建数据库结构。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;建议：
对于普通用户，授予 &lt;code&gt;CONNECT&lt;/code&gt;、&lt;code&gt;RESOURCE&lt;/code&gt; 权限；
对于 &lt;code&gt;DBA&lt;/code&gt; 管理用户，授予 &lt;code&gt;CONNECT&lt;/code&gt;、&lt;code&gt;RESOURCE&lt;/code&gt;、&lt;code&gt;DBA&lt;/code&gt; 权限。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;导入导出&#34;&gt;导入导出&lt;/h2&gt;

&lt;p&gt;数据库的导入导出也是一个很常见的需求。&lt;/p&gt;

&lt;h4 id=&#34;导出&#34;&gt;导出&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ exp [username]/[password]@[orcl] file=./database.dmp  full=y
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; 是数据库用户名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;password&lt;/code&gt; 是数据库用户密码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orcl&lt;/code&gt; 是数据库实例名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; 后面的参数是导出的数据库文件存放位置及文件名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;full&lt;/code&gt; 其值为 &lt;code&gt;y&lt;/code&gt; 表示全部导出，默认为 &lt;code&gt;no&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果只需导出某几张表，可以指定 &lt;code&gt;tables&lt;/code&gt; 参数：&lt;code&gt;tables=&#39;(tableName, tableName1)&#39;&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;导入&#34;&gt;导入&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ imp [username]/[password]@[orcl] file=./database.dmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和导出数据库语法一样，只是关键字不一样。&lt;/p&gt;

&lt;h4 id=&#34;执行-sql-文件&#34;&gt;执行 SQL 文件&lt;/h4&gt;

&lt;p&gt;执行 SQL 文件的方法有很多种。如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;使用 SQL PLUS 命令&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus [username]/password@[orcl] @path/file.name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者远程执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sqlplus [username]/password@server_IP/service_name @path/file.name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果sql脚本文件比较复杂，包含了begin end语句，就会不断显示行号，解决办法就是在 sql 脚本的最后用 &lt;code&gt;/&lt;/code&gt; 符号结尾。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在 SQL PLUS 中执行&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt;start file_path
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt;@ file_path
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;file_path&lt;/code&gt; 是文件路径。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/fnng/archive/2012/08/12/2634485.html&#34;&gt;Oracle表空间（tablespaces）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zyjustin9.iteye.com/blog/2193804&#34;&gt;Oracle数据库，实例，表空间，用户，表之间的关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nvd11.blog.163.com/blog/static/2000183122012111524636835/&#34;&gt;Oracle 在Sqlplus 执行sql脚本文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>