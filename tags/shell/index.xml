<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on nodejh</title>
    <link>http://nodejh.com/tags/shell/index.xml</link>
    <description>Recent content in Shell on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting Environmental Variables in MacOS</title>
      <link>http://nodejh.com/post/Setting-Environmental-Variables-in-MacOS/</link>
      <pubDate>Sun, 19 Mar 2017 17:15:37 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Setting-Environmental-Variables-in-MacOS/</guid>
      <description>

&lt;p&gt;我们安装一个软件后，之所以能够使用一些与该软件相关的命令，是因为该命令被添加到了系统的环境变量里面。比如安装完 Atom 之后，就可以使用 &lt;code&gt;atom&lt;/code&gt; 命令打开文件。有时候我们需要自己设置环境变量，MacOS 设置环境变量有很多种方法，最常用的是编辑当前 SHELL 对应的用户级环境变量配置文件，如 &lt;code&gt;bash&lt;/code&gt; 对应的 &lt;code&gt;.bash_profile&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;MacOS 和 Linux 都是类 Unix 系统，它们添加环境变量的方式也是类似的。本文以 macOS 为例。&lt;/p&gt;

&lt;h2 id=&#34;sehll-类型&#34;&gt;SEHLL 类型&lt;/h2&gt;

&lt;p&gt;在添加环境变量之前，首先要知道使用的是什么 SHELL。MacOS 内置了多种 SHELL，可通过 &lt;code&gt;cat /etc/shells&lt;/code&gt; 查看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/shells
/bin/bash
/bin/csh
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
$ echo $SHELL
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sh&lt;/code&gt;（全称 Bourne Shell）是UNIX最初使用的 shell，而且在每种 UNIX 上都可以使用。Bourne Shell 在 shell 编程方便相当优秀，但在处理与用户的交互方便作得不如其他几种 shell。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bash&lt;/code&gt;（全称 Bourne Again Shell）LinuxOS 默认的，它是 Bourne Shell 的扩展。与 Bourne Shell 完全兼容，并且在 Bourne Shell 的基础上增加了很多特性。可以提供命令补全，命令编辑和命令历史等功能。它还包含了很多 C Shell 和 Korn Shell 中的优点，有灵活和强大的编辑接口，同时又很友好的用户界面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csh&lt;/code&gt;（全称 C Shell）是一种比 Bourne Shell更适合的变种 Shell，它的语法与 C 语言很相似。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tcsh&lt;/code&gt; 是 Linux 提供的 C Shell 的一个扩展版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tcsh&lt;/code&gt; 包括命令行编辑，可编程单词补全，拼写校正，历史命令替换，作业控制和类似 C 语言的语法，他不仅和 Bash Shell 提示符兼容，而且还提供比 Bash Shell 更多的提示符参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ksh&lt;/code&gt;（全称 Korn Shell）集合了 C Shell 和 Bourne Shell 的优点并且和 Bourne Shell 完全兼容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pdksh&lt;/code&gt; 是 Linux 系统提供的 ksh 的扩展。pdksh 支持人物控制，可以在命令行上挂起，后台执行，唤醒或终止程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zsh&lt;/code&gt; Zsh 是一款功能强大终端（shell）软件，既可以作为一个交互式终端，也可以作为一个脚本解释器。它在兼容 Bash 的同时 （默认不兼容，除非设置成 emulate sh） 还有提供了很多改进，例如：更高效、更好的自动补全、更好的文件名展开（通配符展开）、更好的数组处理、可定制性高。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;环境变量配置文件&#34;&gt;环境变量配置文件&lt;/h2&gt;

&lt;p&gt;macOS 默认的是 &lt;code&gt;Bourne Shell&lt;/code&gt;，其环境变量配置文件及加载顺序如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/etc/profile
/etc/bashrc
/etc/paths
~/.bash_profile # macOS
~/.bash_login
~/.profile
~/.bashrc # linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;/etc/profile&lt;/code&gt; &lt;code&gt;/etc/bashrc&lt;/code&gt; 和 &lt;code&gt;/etc/paths&lt;/code&gt; 是系统级环境变量，对所有用户都有效。但它们的加载时机有所区别：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/etc/profile&lt;/code&gt; 任何用户登陆时都会读取该文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/bashrc&lt;/code&gt; bash shell执行时，不管是何种方式，读取此文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/etc/paths&lt;/code&gt; 任何用户登陆时都会读取该文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后面几个是当前用户级的环境变量。macOS 默认用户环境变量配置文件为 &lt;code&gt;~/.bash_profile&lt;/code&gt;，Linux 为 &lt;code&gt;~/.bashrc&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果不存在 &lt;code&gt;~/.bash_profile&lt;/code&gt;，则可以自己创建一个 &lt;code&gt;~/.bash_profile&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果 &lt;code&gt;~/.bash_profile&lt;/code&gt; 文件存在，则后面的几个文件就会被忽略&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;~/.bash_profile&lt;/code&gt; 文件不存在，才会以此类推读取后面的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;如果使用的是 SHELL 类型是 &lt;code&gt;zsh&lt;/code&gt;，则还可能存在对应的 &lt;code&gt;/etc/zshrc&lt;/code&gt; 和 &lt;code&gt;~/.zshrc&lt;/code&gt;。任何用户登录 &lt;code&gt;zsh&lt;/code&gt; 的时候，都会读取该文件。某个用户登录的时候，会读取其对应的 &lt;code&gt;~/.zshrc&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;添加环境变量&#34;&gt;添加环境变量&lt;/h2&gt;

&lt;h4 id=&#34;系统环境变量-etc-paths&#34;&gt;系统环境变量 &lt;code&gt;/etc/paths&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;一般添加系统环境变量，建议通过修改 &lt;code&gt;/etc/paths&lt;/code&gt; 的方式进行添加。一般不建议直接修改 &lt;code&gt;/etc/paths&lt;/code&gt; 文件，而是将路径写在 &lt;code&gt;/etc/paths.d/&lt;/code&gt; 目录下的一个文件里，系统会逐一读取 &lt;code&gt;/etc/paths.d/&lt;/code&gt; 下的每个文件。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; 路径就是这样实现的。我们先看看 Git 的例子：&lt;/p&gt;

&lt;p&gt;首先 &lt;code&gt;/etc/paths&lt;/code&gt; 的文件内容大致如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/paths
/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin
/opt/local/bin
/opt/local/sbin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后查看 &lt;code&gt;/etc/paths.d/&lt;/code&gt; 目录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -l /etc/paths.d
-rw-r--r--    1 root  wheel    19  6 10  2015 git
-rw-r--r--    1 root  wheel    17  4 20  2016 go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看 &lt;code&gt;/etc/paths.d/git&lt;/code&gt; 文件的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /etc/paths.d/git
/usr/local/git/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/usr/local/git/bin&lt;/code&gt; 就是 Git 的可执行文件路径。&lt;/p&gt;

&lt;p&gt;所以我们如果要添加一个系统环境变量，也可以参考这种方式。&lt;/p&gt;

&lt;p&gt;提供一个添加环境变量的的 shell语句，其中 &lt;code&gt;/usr/local/sbin/mypath&lt;/code&gt; 就是我们自己的可执行文件的路径：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo -s &#39;echo &amp;quot;/usr/local/sbin/mypath&amp;quot; &amp;gt; /etc/paths.d/mypath&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但添加完成之后，命令不会立即生效，有两种方法使配置文件生效：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;重新登录终端（如果是图形界面，即重新打开 Terminal）&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;source&lt;/code&gt; 命令加载：&lt;code&gt;source /etc/paths&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;配置生效之后，就可以使用 &lt;code&gt;mypath&lt;/code&gt; 命令了。&lt;/p&gt;

&lt;h4 id=&#34;系统环境变量-etc-profile-和-etc-bashrc&#34;&gt;系统环境变量 &lt;code&gt;/etc/profile&lt;/code&gt; 和 &lt;code&gt;/etc/bashrc&lt;/code&gt;&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;注：一般不建议修改这两个文件&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加环境变量的语法为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;$PATH:&amp;lt;PATH 1&amp;gt;:&amp;lt;PATH 2&amp;gt;:&amp;lt;PATH 3&amp;gt;:...:&amp;lt;PATH N&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以在 &lt;code&gt;/etc/profile&lt;/code&gt; 和 &lt;code&gt;/etc/bashrc&lt;/code&gt; 中添加环境变量，只需要在文件中加入如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;/Users/jh/anaconda/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;用户环境变量&#34;&gt;用户环境变量&lt;/h4&gt;

&lt;p&gt;添加用户环境变量，只需要修改 &lt;code&gt;~/.bash_profile&lt;/code&gt;（Bourne Shell）或 &lt;code&gt;~/.zshrc&lt;/code&gt;（zsh）或其他用户级配置文件即可。添加环境变量的语法也是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=&amp;quot;$PATH:&amp;lt;PATH 1&amp;gt;:&amp;lt;PATH 2&amp;gt;:&amp;lt;PATH 3&amp;gt;:...:&amp;lt;PATH N&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是我的 &lt;code&gt;~/.zshrc&lt;/code&gt; 的部分配置：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export ANDROID_HOME=~/Library/Android/sdk
export PATH=$PATH:~/Library/Android/sdk/tools:~/Library/Android/sdk/platform-tools
export PATH=$PATH:/usr/local/mysql/bin:/usr/local/mysql/support-files
alias tree=&amp;quot;find . -print | sed -e &#39;s;[^/]*/;|____;g;s;____|; |;g&#39;&amp;quot;
alias t=&amp;quot;trans&amp;quot;
export PATH=&amp;quot;/usr/local/sbin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以通过 &lt;code&gt;echo $PATH&lt;/code&gt; 命令查看当前环境变量：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo $PATH
/usr/local/sbin:/Users/jh/.nvm/versions/node/v7.6.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/git/bin:/Users/jh/Library/Android/sdk/tools:/Users/jh/Library/Android/sdk/platform-tools:/usr/local/mysql/bin:/usr/local/mysql/support-files:/Applications/Sublime Text.app/Contents/SharedSupport/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改了配置文件之后，依旧需要重新登录 SHELL 或者使用 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 来是配置立即生效。&lt;/p&gt;

&lt;h4 id=&#34;export&#34;&gt;export&lt;/h4&gt;

&lt;p&gt;还有一种添加环境变量的方法： &lt;code&gt;export&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;export&lt;/code&gt; 命令用于设置或显示环境变量。通过 &lt;code&gt;export&lt;/code&gt; 添加的环境变量仅在此次登陆周期内有效。&lt;/p&gt;

&lt;p&gt;比如很多时候我们的开发环境和生产环境，就可以通过设置一个临时环境变量来，然后在程序中根据不同的环境变量来设置不同的参数。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 设置 NODE_ENV 环境变量。退出 SHELL 时失效
$ export NODE_ENV=development
# 查看当前所有环境变量
$ export -p
...
typeset -x NODE_ENV=development
typeset -x USER=jh
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Node.js 代码中判断当前环境是开发环境还是生产环境：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if(process.env.NODE_ENV === &#39;development&#39;) {
    console.log(&#39;开发环境&#39;);
} else {
    console.log(&#39;生产环境&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issues &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/34&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/34&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>