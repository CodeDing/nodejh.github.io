<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on nodejh</title>
    <link>http://nodejh.com/tags/blog/index.xml</link>
    <description>Recent content in Blog on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Migrate to Hugo from Hexo</title>
      <link>http://nodejh.com/post/Migrate-to-Hugo-from-Hexo/</link>
      <pubDate>Fri, 30 Sep 2016 17:14:37 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Migrate-to-Hugo-from-Hexo/</guid>
      <description>

&lt;p&gt;把博客从 &lt;a href=&#34;http://hexo.io/&#34;&gt;Hexo&lt;/a&gt; 迁移到了 &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;。主要原因有二：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hexo 中文乱码。当中文大概超过1000字，就出现奇怪的乱码。看了 Hexo 的 ISSUE，这个问题也不只我遇到。&lt;/li&gt;
&lt;li&gt;Hexo 生成静态文件太慢了，等上十几二十秒是常有的事。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;遂弃用 Hexo。&lt;/p&gt;

&lt;h2 id=&#34;1-将-hexo-的-yaml-转换为-hugo-的-toml&#34;&gt;1. 将 Hexo 的 YAML 转换为 Hugo 的 TOML&lt;/h2&gt;

&lt;p&gt;Hugo 的配置文件是 TOML 格式的，其生成的 Markdown 文件的 front matter（不知如何翻译）也是 TOML 结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-09-30T17:14:37+08:00&amp;quot;
description = &amp;quot;&amp;quot;
title = &amp;quot;Migrate to Hugo from Hexo&amp;quot;
tags = [&amp;quot;hugo&amp;quot;, &amp;quot;hexo&amp;quot;, &amp;quot;blog&amp;quot;]

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而 Hexo 的配置文件是 YAML 格式，其 Markdown 文件的 front matter 如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title: &#39;Start React with Webpack&#39;
date: 2016-09-09 04:11:13
tags:
  - webpack
  - react

---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以直接将 Hexo 的 Markdown 文件复制到 Hugo 中是不行的，必须得转换一下格式。虽然 Hugo 也可以直接在 &lt;code&gt;config.toml&lt;/code&gt; 中配置 &lt;code&gt;metaDataFormat:&amp;quot;yaml&amp;quot;&lt;/code&gt;，这样 Hugo 就会生成 YAML 结构的 front matter ，但原 Hexo 的 Markdown 文件依旧不能正常的转换，因为 &lt;code&gt;date&lt;/code&gt; 的格式不一样。&lt;/p&gt;

&lt;p&gt;在 Hexo 中，文件里面的 &lt;code&gt;date: 2016-09-09 04:11:13&lt;/code&gt; 并没有存储时区信息，而是把时区放在了 &lt;code&gt;_config.yml&lt;/code&gt; 配置文件中。&lt;/p&gt;

&lt;p&gt;By the way，TOML 是 GitHub 觉得 YAML 不够简洁优雅，所以捣鼓出来的一个东西。既然现在在用 Hugo，就没有理由不用 TOML 代替原来的 YAML。&lt;/p&gt;

&lt;p&gt;其实两者之间的转换也很简单，我用 JS 写了一个脚本来将 YAML 转换为 TOML：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// yaml_to_toml.js
const readline = require(&#39;readline&#39;);
const fs = require(&#39;fs&#39;);
const os = require(&#39;os&#39;);
const moment = require(&#39;moment-timezone&#39;);  // 需要通过 npm install moment-timezone 来安装


const timezone = &#39;Asia/Shanghai&#39;;  // 时区
const src = &#39;hexo&#39;;  // hexo .md 文件源目录
const target = &#39;post&#39;;  // 目标文件目录


// 开始转换
readDir();


// 遍历目录
function readDir() {
    // read all files in src
    fs.readdir(src, function(err, files) {
        files.map((filename) =&amp;gt; {
            // get the file extension
            const extension = filename.substr(filename.lastIndexOf(&#39;.&#39;, filename.length));
            if (extension === &#39;.md&#39;) {
              readFile(`${filename}`);
            }
        });
    });

}


function readFile(filename) {
  fs.readFile(`${src}/${filename}`, { encoding: &#39;utf8&#39; }, function(err, data) {
      if (err) {
          return console.log(&#39;err: &#39;, err);
      }

      const content = data.split(&#39;---&#39;);
      const head = content[0].split(&#39;\n&#39;);
      // console.log(&#39;head: &#39;, head);

      let newHead = head.map((item, index) =&amp;gt; {
        // console.log(&#39;slpitHead: &#39;, slpitHead(item, index, head));
        return slpitHead(item, index, head);
      });
      newHead = newHead.filter((item) =&amp;gt; {return item;});
      // console.log(&#39;newHead: &#39;, newHead);
      const newContent = `+++${os.EOL}${newHead.join(os.EOL)}${os.EOL}${os.EOL}+++${os.EOL}${content[1]}`;
      fs.writeFile(`${target}/${filename}`, newContent, {
          encoding: &#39;utf8&#39;
      }, function(err) {
          if (err) {
            throw err;
          }
          console.log(`${filename}  生成成功！`);
      });
  });
}



function slpitHead(item, index, head) {
  // title
  if (item.indexOf(&#39;title:&#39;) !== -1) {
    return `title = &amp;quot;${item.split(&#39;title:&#39;)[1].trim()}&amp;quot;`;
  }

  // date
  if (item.indexOf(&#39;date:&#39;) !== -1) {
    return `date = &amp;quot;${(moment.tz(item.split(&#39;date:&#39;)[1], timezone)).format()}&amp;quot;`;
  }

  // tags
  if (item.indexOf(&#39;tags:&#39;) !== -1) {
    // console.log(&#39;tags...&#39;);
    const tags = [];
    for (let i=index+1; i&amp;lt;head.length; i++) {
      if (head[i].indexOf(&#39;-&#39;) !== -1) {
        // console.log(&#39;head[i].split(&#39;-&#39;)[1]: &#39;, head[i].split(&#39;-&#39;)[1]);
        tags.push(head[i].split(&#39;-&#39;)[1].trim());
      } else {
        break;
      }
    }
    // console.log(&#39;tags: &#39;, tags);
    return `tags = ${JSON.stringify(tags)}`;
  }

  // categories
  if (item.indexOf(&#39;categories:&#39;) !== -1) {
    const categories = [];
    for (let i=index+1; i&amp;lt;head.length; i++) {
      if (head[i].indexOf(&#39;-&#39;) !== -1) {
        categories.push(head[i].split(&#39;-&#39;)[1].trim());
      } else {
        break;
      }
    }
    // console.log(&#39;categories: &#39;, categories);
    return `categories = ${JSON.stringify(categories)}`;
  }

  return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先配置好 &lt;code&gt;timezone&lt;/code&gt; &lt;code&gt;src&lt;/code&gt; &lt;code&gt;target&lt;/code&gt; 三个参数。然后 &lt;code&gt;npm install moment-timezone&lt;/code&gt; 安装需要的第三方包，最后 &lt;code&gt;node yaml_to_toml.js&lt;/code&gt; 即可。&lt;/p&gt;

&lt;h2 id=&#34;2-图片目录的迁移&#34;&gt;2. 图片目录的迁移&lt;/h2&gt;

&lt;p&gt;本地图片迁移也非常简单。&lt;/p&gt;

&lt;p&gt;我之前使用 Hexo 的时候，是将所有图片都放在 &lt;code&gt;source/images/&lt;/code&gt; 目录里面的，在 Markdown 文件中引入图片是这样的： &lt;code&gt;![image title](/iamges/image_name.png)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Hugo 的图片可以直接放在其 &lt;code&gt;static/&lt;/code&gt; 目录里面，其路径就是 &lt;code&gt;/iamges/image_name.png&lt;/code&gt;，所以我只需要将 Hexo 中的 &lt;code&gt;images&lt;/code&gt; 目录复制到 Hugo 的 &lt;code&gt;static/&lt;/code&gt; 目录下即可。&lt;/p&gt;

&lt;h2 id=&#34;3-主题&#34;&gt;3. 主题&lt;/h2&gt;

&lt;p&gt;看遍了 Hugo 给出的所有主题，都不满意。很多主题都超级简洁，这种风格还是很喜欢的。所以决定自己写一个。&lt;/p&gt;

&lt;p&gt;最终 Fork 了 &lt;a href=&#34;https://github.com/digitalcraftsman/hugo-cactus-theme&#34;&gt;https://github.com/digitalcraftsman/hugo-cactus-theme&lt;/a&gt; 这个主题，然后改成了自己想要的样子。&lt;/p&gt;

&lt;p&gt;主页&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-22-Migrate-to-Hugo-from-Hexo-1.png&#34; alt=&#34;Migrate-to-Hugo-from-Hexo-1.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;文章页&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-22-Migrate-to-Hugo-from-Hexo-2.png&#34; alt=&#34;Migrate-to-Hugo-from-Hexo-2.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;改后的主题源码：&lt;a href=&#34;https://github.com/nodejh/hugo-cactus-theme&#34;&gt;https://github.com/nodejh/hugo-cactus-theme&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;4-部署&#34;&gt;4. 部署&lt;/h2&gt;

&lt;p&gt;由于 Github Pages 国内访问速度慢，所以同时把静态页面部署到了 Github Page 和 Coding Pages。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 添加两个仓库
git remote add all https://github.com/nodejh/nodejh.github.io
git remote set-url origin --push --add https://git.coding.net/nodejh/nodejh.git
git remote set-url origin --push --add https://github.com/nodejh/nodejh.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后只需要执行 &lt;code&gt;git push all branch&lt;/code&gt; 就可以同时向两个仓库 push 代码了。但暂时不这样做。而是在 &lt;code&gt;public&lt;/code&gt; 目录外创建一个 &lt;code&gt;deploy.sh&lt;/code&gt; 目录，用来自动部署：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来再给 &lt;code&gt;deploy.sh&lt;/code&gt; 添加可执行权限 &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;。然后每次写完东西只需要 &lt;code&gt;.／deploy.sh &#39;commit message&#39;&lt;/code&gt; 即可。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issue: &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/11&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/11&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>