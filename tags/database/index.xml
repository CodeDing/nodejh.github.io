<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on nodejh</title>
    <link>http://nodejh.com/tags/database/</link>
    <description>Recent content in Database on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Mar 2017 00:42:23 +0800</lastBuildDate>
    <atom:link href="http://nodejh.com/tags/database/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Understand the Oracle startup process</title>
      <link>http://nodejh.com/post/Understand-the-Oracle-startup-process/</link>
      <pubDate>Sun, 26 Mar 2017 00:42:23 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Understand-the-Oracle-startup-process/</guid>
      <description>

&lt;h2 id=&#34;一-常用启动步骤&#34;&gt;一. 常用启动步骤&lt;/h2&gt;

&lt;p&gt;对于普通用户，如果需要使用 Oracle 数据库，需要两个启动步骤：启动数据库和启动监听器。&lt;/p&gt;

&lt;p&gt;如果还需要使用 OEM 来监控数据库服务，则还要启动 OEM。&lt;/p&gt;

&lt;h4 id=&#34;1-启动数据库&#34;&gt;1. 启动数据库&lt;/h4&gt;

&lt;p&gt;我们可以使用 &lt;code&gt;sqlplus&lt;/code&gt; 来启动数据库。关于 &lt;code&gt;sqlplus&lt;/code&gt; 的详细使用方法请参考 &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/31&#34;&gt;《使用 SQL *Plus 管理 Oracle 数据库》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;进入 &lt;code&gt;sqlplus&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlplus / as sysdba
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动数据库：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; startup
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-启动监听器&#34;&gt;2. 启动监听器&lt;/h4&gt;

&lt;p&gt;Oracle 监听器是一个独立的后台进程，用于监听客户端向数据库服务器端提出的连接请求，它是客户端和服务器端通讯的桥梁。&lt;/p&gt;

&lt;p&gt;启动监听器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsnrctl start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完成这两个步骤，就可以使用数据库了。&lt;/p&gt;

&lt;h4 id=&#34;3-启动-oem&#34;&gt;3. 启动 OEM&lt;/h4&gt;

&lt;p&gt;Oracle Enterprise Manager（Oracle企业管理器，简称 OEM ）是一个图形化数据库管理工具，可同时监控管理多个系统上的多个数据库，因而特别适合分布式环境。&lt;/p&gt;

&lt;p&gt;启动 OEM：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ emctl start dbconsole
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动成功后就可以通过 &lt;code&gt;http://服务器:1158/em&lt;/code&gt; 来访问基于 Web 的监控页面。&lt;/p&gt;

&lt;h2 id=&#34;二-启动概述&#34;&gt;二. 启动概述&lt;/h2&gt;

&lt;p&gt;Oracle Serve 由实例（Instance）和数据库（database）组成，每一个运行的 Oracle 数据库都与一个 Oracle 实例关联。&lt;/p&gt;

&lt;p&gt;实例是由一组后台进程和一块称为系统全局区 SGA（System Global Area）的共享内存段组成。后台进程是数据库和操作系统进行交互的通道，后台进程的命名由 ORACLE_SID 决定，Oracle 根据 ORACLE_SID 来寻找参数文件启动实例。数据库是指存储在磁盘上的一组物理文件。&lt;/p&gt;

&lt;p&gt;Oracle 数据库具有四种状态，启动过程具有三个阶段。四种状态分别 &lt;code&gt;shutdown&lt;/code&gt; &lt;code&gt;nomount&lt;/code&gt; &lt;code&gt;mount&lt;/code&gt; &lt;code&gt;open&lt;/code&gt;，对应三个阶段分别为：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;启动实例 &lt;code&gt;shutdown --&amp;gt; nomount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;装载数据库 &lt;code&gt;nomount --&amp;gt; mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开数据库 &lt;code&gt;mount --&amp;gt; open&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;                                                    ^
                                           open     |
                                     +--------------|
                                     |   All files
                                     |   opened as
                                     | described by
                              mount  |  the control
                       +-------------+ file for this
                       | Control file    instance
                       |    opened
                       |   for this
               nomount |   instance
           +-----------+
           |  Instance
           |   started
           |
  shutdown |
-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动实例后，Oracle 软件会将实例与特定的数据库关联，这个过程称为装载数据库。接下
来可以打开数据库，以便授权用户访问数据库。在同一台计算机上可以并发执行多个实例，
每一个实例只访问自己的物理数据库。&lt;/p&gt;

&lt;h2 id=&#34;三-启动详解&#34;&gt;三. 启动详解&lt;/h2&gt;

&lt;p&gt;为了弄清楚 Oracle 启动过程的详细内容，我们需要用到两个命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt; 用来查看系统运行了哪些进程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipcs&lt;/code&gt; 查询进程间通信设施状态，显示使用了共享内存和信号量&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-1-shutdown-状态&#34;&gt;3.1. &lt;code&gt;shutdown&lt;/code&gt; 状态&lt;/h4&gt;

&lt;p&gt;当 Oracle 处于该状态的时候，Oracle 的所有文件都静静的躺在磁盘里，一切都还未开始，属于关机状态。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ps -ef | grep oracle
oracle    4524     1  0 00:54 ?        00:00:39 /data/oracle/product/11.2.0/db_1/bin/emagent
root     12825   974  0 13:49 ?        00:00:00 sshd: oracle [priv]
oracle   12832 12825  0 13:49 ?        00:00:00 sshd: oracle@pts/0
oracle   12833 12832  0 13:49 pts/0    00:00:00 -bash
oracle   13825 12833  0 13:54 pts/0    00:00:00 ps -ef
oracle   13826 12833  0 13:54 pts/0    00:00:00 grep --color=auto oracle
$ ipcs -a

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status
0x011268f0 458753     root       600        1000       8

------ Semaphore Arrays --------
key        semid      owner      perms      nsems
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-2-启动实例-shutdown-nomount&#34;&gt;3.2. 启动实例 &lt;code&gt;shutdown --&amp;gt; nomount&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;总体来说，启动数据库实例包括以下操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;读取参数文件 &lt;code&gt;SPFILE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分配 SGA&lt;/li&gt;
&lt;li&gt;启动后台进程&lt;/li&gt;
&lt;li&gt;打开告警文件和跟踪文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在启动实例时，将为实例创建一系列后台进程和服务进程，并且在内存中创建 SGA 区等内存结构。在实例启动的过程中只会使用到初始化参数文件，数据库是否存在对实例的启动没有影响。如果初化参数设置有误，实例将无法启动。&lt;/p&gt;

&lt;p&gt;启动数据库实例的命令如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sqlplus / as sysdba

SQL*Plus: Release 11.2.0.1.0 Production on Sun Mar 26 14:05:14 2017

Copyright (c) 1982, 2009, Oracle.  All rights reserved.

Connected to an idle instance.

SQL&amp;gt; startup nomount
ORACLE instance started.

Total System Global Area 3273641984 bytes
Fixed Size		    2217792 bytes
Variable Size		 2432698560 bytes
Database Buffers	  822083584 bytes
Redo Buffers		   16642048 bytes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动数据库实例后，只会创建实例（即创建 Oracle 实例的各种内存结构与服务进程），并不加载数据库，也不会打开任何数据文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;测试数据文件能否打开：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; select * from v$datafile;
select * from v$datafile
              *
ERROR at line 1:
ORA-01507: database not mounted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;select * from v$datafile&lt;/code&gt; 的时候报错，说明数据库文件在 &lt;code&gt;nomount&lt;/code&gt; 状态下是无法访问的，因为数据字典需要从控制文件获取文件的信息，而此时控制文件没有打开所以无法查看。&lt;/p&gt;

&lt;p&gt;但是在 &lt;code&gt;nomount&lt;/code&gt; 状态下可以通过参数文件获得控制文件的位置，因为此时参数文件已经打开：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; show parameter control_files;

NAME				     TYPE
------------------------------------ 
VALUE
------------------------------
control_files			     string
/data/oracle/oradata/orcl/cont
rol01.ctl, /data/oracle/flash_
recovery_area/orcl/control02.c
tl
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;3-2-1-读取参数文件&#34;&gt;3.2.1 读取参数文件&lt;/h6&gt;

&lt;p&gt;启动数据库实例首先会读取 &lt;code&gt;SPFILE&lt;/code&gt; 文件中的初始化参数，如果 &lt;code&gt;SPFILE&lt;/code&gt; 文件不存在，则会读取初始化文件。Linux 系统的 &lt;code&gt;SPFILE&lt;/code&gt; 文件在 &lt;code&gt;$ORACLE_HOME/dbs&lt;/code&gt; 目录下，Windows NT 和 Windows 2000 中 &lt;code&gt;SPFILE&lt;/code&gt; 文件目录在 &lt;code&gt;%ORACLE_HOME%\database&lt;/code&gt;。文件的读取顺序如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先查找 &lt;code&gt;spfile$ORACLE_SID.ora&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果不存在，则继续查找 &lt;code&gt;spfile.ora&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果不存在，则继续查找 &lt;code&gt;init$ORACLE_SID.ora&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中 &lt;code&gt;spfile$ORACLE_SID.ora&lt;/code&gt; 和 &lt;code&gt;spfile.ora&lt;/code&gt; 属于 &lt;code&gt;SPFILE&lt;/code&gt; 文件，&lt;code&gt;init$ORACLE_SID.ora&lt;/code&gt; 是初始化文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;查看 &lt;code&gt;$ORACLE_HOME&lt;/code&gt; 和 &lt;code&gt;$ORACLE_SID&lt;/code&gt; 的值可使用 &lt;code&gt;echo&lt;/code&gt; 命令，如 &lt;code&gt;echo $ORACLE_HOME&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&#34;3-2-2-分配-sga&#34;&gt;3.2.2 分配 SGA&lt;/h6&gt;

&lt;p&gt;读取到参数文件之后，Oracle 会根据参数文件分配 SGA（System Global Area）。&lt;/p&gt;

&lt;p&gt;SGA 是一个非常庞大的内存区间，这也是为什么开启 Oracle 之后占用了很大内存的原因。SGA 由所有服务进程和后台进程共享。&lt;/p&gt;

&lt;p&gt;我们可以通过 &lt;code&gt;show sga&lt;/code&gt; 或 &lt;code&gt;select * from v$sga&lt;/code&gt; 查看 SGA 的大小：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; show sga;
Total System Global Area 3273641984 bytes
Fixed Size		    2217792 bytes
Variable Size		 2432698560 bytes
Database Buffers	  822083584 bytes
Redo Buffers		   16642048 bytes

SQL&amp;gt; select * from v$sga;

NAME					      VALUE
---------------------------------------- ----------
Fixed Size				    2217792
Variable Size				 2432698560
Database Buffers			  822083584
Redo Buffers				   16642048

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SGA 分为不同的池，我们可以通过视图 &lt;code&gt;v$sgastat&lt;/code&gt; 查看：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; select pool,sum(bytes) bytes from v$sgastat group by pool;

POOL			      BYTES
------------------------ ----------
java pool		   16777216
large pool		   16777216
shared pool		 1258295992
			  840943424

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;3-2-3-启动后台进程&#34;&gt;3.2.3 启动后台进程&lt;/h6&gt;

&lt;p&gt;其中有 5 个进程必须启动， DBWR、LGWR、SMON、PMON、CKPT。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SMON&lt;/code&gt; 系统监视器（System Monitor）。如果 Oracle 实例失败，则在 SGA 中的任何没有写到磁盘中的数据都会丢失。有许多情况可能引起 Oracle 实例失败，例如操作系统的崩溃就会引起 Oracle 实例的失败。当实例失败之后，如果重新打开该数据库，则后台进程 SMON 自动执行实例的复原操作。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DBWR&lt;/code&gt; 数据库书写器（Database Write）。该服务器进程在缓冲存储区中记录所有的变化和数据。DBWR 把来自数据库的缓冲存储区中的脏数据写到数据文件中，以便确保数据库缓冲存储区中有足够的空闲的缓冲存储区。脏数据就是正在使用但是没有写到数据文件中的数据。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LGWR&lt;/code&gt; 日志书写器（Log Write）。LGWR 负责把重做日志缓冲存储区中的数据写入到重做日志文件中。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;CKPT&lt;/code&gt; 检查点（Checkpoint）。该进程可以用来同步化数据库的文件，它可以把日志中的文件写入到数据库中。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;PMON&lt;/code&gt; 进程监视器（Process Monitor）。当取消当前的事务，或释放进程占用的锁以及释放其它资源之后，PMON 进程清空那些失败的进程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看系统进程和通信设施状态：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ps -ef | grep oracle
oracle    4524     1  0 Mar26 ?        00:01:25 /data/oracle/product/11.2.0/db_1/bin/emagent
root      9797   974  0 00:57 ?        00:00:00 sshd: oracle [priv]
oracle    9805  9797  0 00:57 ?        00:00:00 sshd: oracle@pts/0
oracle    9806  9805  0 00:57 pts/0    00:00:00 -bash
oracle   10020     1  0 00:58 ?        00:00:00 ora_pmon_orcl
oracle   10022     1  0 00:58 ?        00:00:01 ora_vktm_orcl
oracle   10026     1  0 00:58 ?        00:00:00 ora_gen0_orcl
oracle   10028     1  0 00:58 ?        00:00:00 ora_diag_orcl
oracle   10030     1  0 00:58 ?        00:00:00 ora_dbrm_orcl
oracle   10032     1  0 00:58 ?        00:00:00 ora_psp0_orcl
oracle   10034     1  0 00:58 ?        00:00:01 ora_dia0_orcl
oracle   10036     1  0 00:58 ?        00:00:00 ora_mman_orcl
oracle   10038     1  0 00:58 ?        00:00:00 ora_dbw0_orcl
oracle   10040     1  0 00:58 ?        00:00:00 ora_lgwr_orcl
oracle   10042     1  0 00:58 ?        00:00:00 ora_ckpt_orcl
oracle   10044     1  0 00:58 ?        00:00:00 ora_smon_orcl
oracle   10046     1  0 00:58 ?        00:00:00 ora_reco_orcl
oracle   10048     1  0 00:58 ?        00:00:00 ora_mmon_orcl
oracle   10050     1  0 00:58 ?        00:00:00 ora_mmnl_orcl
oracle   10052     1  0 00:58 ?        00:00:00 ora_d000_orcl
oracle   10054     1  0 00:58 ?        00:00:00 ora_s000_orcl
oracle   15675  9806  0 01:59 pts/0    00:00:00 ps -ef
oracle   15676  9806  0 01:59 pts/0    00:00:00 grep --color=auto oracle
$ ipcs -a

------ Message Queues --------
key        msqid      owner      perms      used-bytes   messages

------ Shared Memory Segments --------
key        shmid      owner      perms      bytes      nattch     status
0x011268f0 458753     root       600        1000       9
0x00000000 524290     oracle     660        4096       0
0x00000000 557059     oracle     660        4096       0
0x2a1ee740 589828     oracle     660        4096       0

------ Semaphore Arrays --------
key        semid      owner      perms      nsems
0x19ba9600 1310738    oracle     660        154
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由 &lt;code&gt;smon&lt;/code&gt;、&lt;code&gt;pmon&lt;/code&gt; &lt;code&gt;lgwr&lt;/code&gt; 等进程可以看出此阶段创建了多个后台进程，并首次报告使用了共享内存和信号量。&lt;/p&gt;

&lt;h6 id=&#34;3-2-4-打开告警文件和跟踪文件&#34;&gt;3.2.4 打开告警文件和跟踪文件&lt;/h6&gt;

&lt;p&gt;数据库的启动过程记录在警告追踪文件中，该警告追踪文件中包括数据库启动信息，它存放在参数&lt;code&gt;BACKGOUND_DUMP_DEST&lt;/code&gt; 定义的目录下，警告日志的名字为 &lt;code&gt;alert_&amp;lt;sid&amp;gt;.log&lt;/code&gt;，&lt;code&gt;sid&lt;/code&gt; 是实例的名称：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; show parameter background_dump_dest;

NAME			           TYPE               VALUE
-------------------- -------------------------------------------------
background_dump_dest  string  /data/oracle/diag/rdbms/orcl/orcl/trace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入到目录查看警告日志关于 &lt;code&gt;startup nomount&lt;/code&gt; 过程记录：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ more alert_orcl.log
Fri Nov 11 17:04:51 2016
Starting ORACLE instance (normal)
LICENSE_MAX_SESSION = 0
LICENSE_SESSIONS_WARNING = 0
Shared memory segment for instance monitoring created
Picked latch-free SCN scheme 3
Using LOG_ARCHIVE_DEST_1 parameter default value as USE_DB_RECOVERY_FILE_DEST
Autotune of undo retention is turned on.
IMODE=BR
ILAT =27
LICENSE_MAX_USERS = 0
SYS auditing is disabled
Starting up:
Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
With the Partitioning, OLAP, Data Mining and Real Application Testing options.
Using parameter settings in client-side pfile /data/oracle/admin/orcl/pfile/init.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oracle 实例的后台进程会在遇到问题的时候将日志写入跟踪文件中。数据库的跟踪文件在目录由 &lt;code&gt;BACKGOUND_DUMP_DEST&lt;/code&gt; 参数指定，最大大小由 &lt;code&gt;MAX_DUMP_FILE_SIZE&lt;/code&gt; 指定，默认为&lt;code&gt;UNLIMITED&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; show parameter user_dump_dest;

NAME				     TYPE
------------------------------------ ----------------------
VALUE
------------------------------
user_dump_dest			     string
/data/oracle/diag/rdbms/orcl/o
rcl/trace
SQL&amp;gt; show parameter max_dump_file_size;

NAME				     TYPE
------------------------------------ ----------------------
VALUE
------------------------------
max_dump_file_size		     string
unlimited
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-3-装载数据库-nomunt-mount&#34;&gt;3.3 装载数据库 &lt;code&gt;nomunt --&amp;gt; mount&lt;/code&gt;&lt;/h4&gt;

&lt;h6 id=&#34;装载数据库概述&#34;&gt;装载数据库概述&lt;/h6&gt;

&lt;p&gt;装载数据库就是把数据库文件和实例关联起来，包括以下三个步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oracle根据参数文件 &lt;code&gt;SPFILE&lt;/code&gt; 中的参数找到控制文件&lt;/li&gt;
&lt;li&gt;打开控制文件&lt;/li&gt;
&lt;li&gt;从控制文件获得数据字典和重做日志文件的名字及位置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完成以上三步，没有任何错误的情况下，Oracle 就已经把实例和数据库关联起来了。&lt;/p&gt;

&lt;p&gt;装载数据库有两种方式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一是直接启动数据库到 &lt;code&gt;mount&lt;/code&gt; 状态：&lt;code&gt;startup mount&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;二是如果数据库已经启动到 &lt;code&gt;nomount&lt;/code&gt; 状态，使用 &lt;code&gt;alter database mount&lt;/code&gt; 把数据库切换到&lt;code&gt;mount&lt;/code&gt; 状态&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;alert database mount&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; alter database mount;

Database altered.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;startup mount&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; shutdown immediate;
ORA-01109: database not open


Database dismounted.
ORACLE instance shut down.
SQL&amp;gt; startup mount;
ORACLE instance started.

Total System Global Area 3273641984 bytes
Fixed Size		    2217792 bytes
Variable Size		 2432698560 bytes
Database Buffers	  822083584 bytes
Redo Buffers		   16642048 bytes
Database mounted.
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;3-3-1-可以查询控制文件&#34;&gt;3.3.1 可以查询控制文件&lt;/h6&gt;

&lt;p&gt;这个时候我们就可以查询控制文件、数据文件和重做日志文件了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; select status from v$instance;

STATUS
------------------------
MOUNTED

SQL&amp;gt; select name from v$controlfile;

NAME
--------------------------------------------------------------------------------
/data/oracle/oradata/orcl/control01.ctl
/data/oracle/flash_recovery_area/orcl/control02.ctl

SQL&amp;gt; select name from v$datafile;

NAME
--------------------------------------------------------------------------------
/data/oracle/oradata/orcl/system01.dbf
/data/oracle/oradata/orcl/sysaux01.dbf
/data/oracle/oradata/orcl/undotbs01.dbf
/data/oracle/oradata/orcl/users01.dbf
/data/oracle/oradata/orcl/example01.dbf
/data/oracle/oradata/orcl/SoftwareManagement.dbf

6 rows selected.

SQL&amp;gt; select member from v$logfile;

MEMBER
--------------------------------------------------------------------------------
/data/oracle/oradata/orcl/redo03.log
/data/oracle/oradata/orcl/redo02.log
/data/oracle/oradata/orcl/redo01.log

&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;3-3-2-不能查询表-视图&#34;&gt;3.3.2 不能查询表、视图&lt;/h6&gt;

&lt;p&gt;但此时还不能查询数据库文件，如表和视图。所以对于普通用户而言，这个时候数据库还是不可用的。只有等到经历了最后一步 &lt;code&gt;打开数据库&lt;/code&gt; 之后，才能使用数据库。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SQL&amp;gt; select * from tab;
select * from tab
              *
ERROR at line 1:
ORA-01219: database not open: queries allowed on fixed tables/views only

SQL&amp;gt; select * from scott.dept;
select * from scott.dept
                    *
ERROR at line 1:
ORA-01219: database not open: queries allowed on fixed tables/views only
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;3-4-打开数据库-mount-open&#34;&gt;3.4 打开数据库 &lt;code&gt;mount --&amp;gt; open&lt;/code&gt;&lt;/h4&gt;

&lt;h6 id=&#34;打开数据库概述&#34;&gt;打开数据库概述&lt;/h6&gt;

&lt;p&gt;打开数据库就表示 Oracle 打开数据库文件和重做日志文件。打开数据库时，实例将打开所有处于联机状态的数据文件和重做日志文件。控制文件中的任何一个数据文件或重做日志文件无法正常打开，数据库都将返回错误信息，这时需要进行数据库恢复。&lt;/p&gt;

&lt;p&gt;只有将数据库设置为打开状态后，数据库才处于正常状态，这时普通用户才能够访问数据库。&lt;/p&gt;

&lt;p&gt;打开数据库也有两种方式。&lt;/p&gt;

&lt;p&gt;一是使用 &lt;code&gt;alter&lt;/code&gt; 命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt;SQL alter database open;

Database altered.

SQL&amp;gt; select status from v$instance;

STATUS
------------------------
OPEN

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二是直接通过 &lt;code&gt;startup&lt;/code&gt; 命令启动，&lt;code&gt;startup&lt;/code&gt; 命令会逐步完成数据库启动的三个步骤（创建实例、装载数据库、打开数据库），将数据库启动到 &lt;code&gt;open&lt;/code&gt; 状态：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SQL&amp;gt; startup
ORACLE instance started.

Total System Global Area 3273641984 bytes
Fixed Size		    2217792 bytes
Variable Size		 2432698560 bytes
Database Buffers	  822083584 bytes
Redo Buffers		   16642048 bytes
Database mounted.
Database opened.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动之后，就可以访问数据文件了：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SQL&amp;gt; select * from scott.dept;

    DEPTNO DNAME			LOC
---------- ---------------------------- --------------------------
	10 ACCOUNTING			NEW YORK
	20 RESEARCH			DALLAS
	30 SALES			CHICAGO
	40 OPERATIONS			BOSTON
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;常见连接错误&#34;&gt;常见连接错误&lt;/h2&gt;

&lt;h4 id=&#34;1-未启动数据库实例&#34;&gt;1. 未启动数据库实例&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Connection Failed
ORA-12514: TNS:listener does not currently know of service requested in connect descriptor
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;2-未启动监听器&#34;&gt;2. 未启动监听器&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Oracle Connection Failed
ORA 12541: TNS:no listener
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/cd/B28359_01/server.111/b28310/start001.htm#ADMIN10063&#34;&gt;Starting Up a Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.itpub.net/9399028/viewspace-682015/&#34;&gt;Oracle SGA详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.itpub.net/25264937/viewspace-694917/&#34;&gt;Oracle之内存结构（SGA、PGA）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to Create Auto Increment Column in Oracle</title>
      <link>http://nodejh.com/post/How-to-Create-Auto-Increment-Column-in-Oracle/</link>
      <pubDate>Mon, 20 Feb 2017 20:26:33 +0800</pubDate>
      
      <guid>http://nodejh.com/post/How-to-Create-Auto-Increment-Column-in-Oracle/</guid>
      <description>

&lt;p&gt;如果你经常使用 MySQL，你肯定对 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 非常熟悉，因为经常要用到它。&lt;/p&gt;

&lt;h2 id=&#34;一-什么是自增列&#34;&gt;一、什么是自增列 ？&lt;/h2&gt;

&lt;p&gt;自增列是数据库中值随插入的每个行自动增加的一列。它最常用于主键或 ID 字段，这样每次增加一行时，不用指该字段的值，它就会自动增加，而且是唯一的。&lt;/p&gt;

&lt;p&gt;当在 MySQL 中定义列时，我们可以指定一个名为 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 的参数。然后，每当将新值插入此表中时，放入此列的值比最后一个值加 &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但很不幸，Oracle 没有 &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; 功能。 那要如何在Oracle中做到这一点呢？&lt;/p&gt;

&lt;h2 id=&#34;二-在-oracle-11g-中设置自增字段&#34;&gt;二、在  Oracle 11g 中设置自增字段&lt;/h2&gt;

&lt;h3 id=&#34;1-创建表&#34;&gt;1. 创建表&lt;/h3&gt;

&lt;p&gt;首先创建一张用于测试的表：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE &amp;quot;TEST&amp;quot; (
    ID NUMBER(11) PRIMARY KEY,
    NAME VARCHAR2(50BYTE) NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2-创建序列&#34;&gt;2. 创建序列&lt;/h3&gt;

&lt;p&gt;然后创建一个名为 &lt;code&gt;TEST_ID_SEQ&lt;/code&gt; 的序列（序列名称自己随意设定）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE SEQUENCE TEST_ID_SEQ
INCREMENT BY 1
START WITH 100
MAXVALUE 999999999
NOCYCLE
NOCACHE;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果要删除序列，可以使用下面的 SQL 命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DROP SEQUENCE TEST_ID_SEQ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对 &lt;code&gt;SEQUENCE&lt;/code&gt; 的一些说明：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INCREMENT BY&lt;/code&gt; 用于指定序列增量（默认值：1），如果指定的是正整数，则序列号自动递增，如果指定的是负数，则自动递减。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;START WITH&lt;/code&gt; 用于指定序列生成器生成的第一个序列号，当序列号顺序递增时默认值为序列号的最小值，当序列号顺序递减时默认值为序列号的最大值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAXVALUE&lt;/code&gt; 用于指定序列生成器可以生成的组大序列号（必须大于或等于 &lt;code&gt;START WITH&lt;/code&gt;，并且必须大于 &lt;code&gt;MINVALUE&lt;/code&gt;），默认为 &lt;code&gt;NOMAXVALUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINVALUE&lt;/code&gt; 用于指定序列生成器可以生成的最小序列号（必须小于或等于 &lt;code&gt;START WITH&lt;/code&gt;，并且必须小于 &lt;code&gt;MAXVALUE&lt;/code&gt;），默认值为 &lt;code&gt;NOMINVALUE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CYCLE&lt;/code&gt; 用于指定在达到序列的最大值或最小值之后是否继续生成序列号，默认为 &lt;code&gt;NOCYCLE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CACHE&lt;/code&gt; 用于指定在内存中可以预分配的序列号个数（默认值：20）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;到这一步其实就已经可以实现字段自增，只要插入的时候，将 ID 的值设置为序列的下一个值 &lt;code&gt;TEST_ID_SEQ.NEXTVAL&lt;/code&gt; 就可以了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name1&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name2&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (TEST_ID_SEQ.NEXTVAL, &#39;name3&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了简化插入操作，我们还可以创建一个触发器，当将数据插入到 &amp;ldquo;TEST&amp;rdquo; 表的时候，自动将最新的 ID 插入进去。&lt;/p&gt;

&lt;h3 id=&#34;3-创建触发器&#34;&gt;3. 创建触发器&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;CREATE OR REPLACE TRIGGER TEST_ID_SEQ_TRG
BEFORE INSERT ON &amp;quot;TEST&amp;quot;
FOR EACH ROW
WHEN (NEW.&amp;quot;ID&amp;quot; IS NULL)
BEGIN
  SELECT TEST_ID_SEQ.NEXTVAL
  INTO :NEW.&amp;quot;ID&amp;quot;
  FROM DUAL;
END;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话，每次写插入语句，只需要将 &lt;code&gt;ID&lt;/code&gt; 字段的值设置为 &lt;code&gt;NULL&lt;/code&gt; 它就会自动递增了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name4&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name5&#39;);
SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name6&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
105	name6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-一些值得注意的地方&#34;&gt;4. 一些值得注意的地方&lt;/h3&gt;

&lt;h4 id=&#34;4-1-插入指定-id&#34;&gt;4.1 插入指定 ID&lt;/h4&gt;

&lt;p&gt;如果某条插入语句指定了 &lt;code&gt;ID&lt;/code&gt; 的值如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (1000, &#39;name1001&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
1000	name1001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;那么下次 &lt;code&gt;ID&lt;/code&gt; 还是会在原来的基础上继续增加：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SQL&amp;gt; INSERT INTO &amp;quot;TEST&amp;quot; (&amp;quot;ID&amp;quot;, &amp;quot;NAME&amp;quot;) VALUES (NULL, &#39;name1001&#39;);
SQL&amp;gt; SELECT * FROM &amp;quot;TEST&amp;quot;;

ID   NAME
---  ------
100	name1
101	name2
102	name3
103	name4
104	name5
1000	name1001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但当序列的值到了 &lt;code&gt;1000&lt;/code&gt; 的时候，如果 &lt;code&gt;ID&lt;/code&gt; 允许重复，就会有两行记录 &lt;code&gt;ID&lt;/code&gt; 都为 &lt;code&gt;1000&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但如果 &lt;code&gt;ID&lt;/code&gt; 设置为了主键，如本文的例子 &lt;code&gt;ID NUMBER(11) PRIMARY KEY&lt;/code&gt;，则插入就会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error : ORA-00001: unique constraint (SOFTWARE.SYS_C0014995) violated
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-2-字段加引号&#34;&gt;4.2 字段加引号&lt;/h4&gt;

&lt;p&gt;在 SQL 语句中，字段最好都加上引号，不然可能会报错：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error : ORA-00900: invalid SQL statement
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ORA-24344: Success with Compilation Error
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-3-squence&#34;&gt;4.3 SQUENCE&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;第一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 返回的是初始值；随后的 &lt;code&gt;NEXTVAL&lt;/code&gt; 会自动增加 &lt;code&gt;INCREMENT BY&lt;/code&gt; 对应的值，然后返回增加后的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CURRVAL&lt;/code&gt; 总是返回当前 &lt;code&gt;SEQUENCE&lt;/code&gt; 的值，但是在第一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 初始化之后才能使用 &lt;code&gt;CURRVAL&lt;/code&gt; ，否则会出错。&lt;/li&gt;
&lt;li&gt;一次 &lt;code&gt;NEXTVAL&lt;/code&gt; 会增加一次 &lt;code&gt;SEQUENCE&lt;/code&gt; 的值，所以如果在同一个语句里面使用多个NEXTVAL，其值就是不一样的。&lt;/li&gt;
&lt;li&gt;如果指定 &lt;code&gt;CACHE&lt;/code&gt; 值，Oracle 就可以预先在内存里面放置一些 &lt;code&gt;SEQUENCE&lt;/code&gt;，这样存取的快些。 &lt;code&gt;CACHE&lt;/code&gt; 里面的取完后，Oracle 自动再取一组到 &lt;code&gt;CACHE&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;但使用 &lt;code&gt;CACHE&lt;/code&gt; 或许会跳号，比如数据库突然不正常关闭（&lt;code&gt;shutdown abort&lt;/code&gt;)， &lt;code&gt;CACHE&lt;/code&gt; 中的 &lt;code&gt;SEQUENCE&lt;/code&gt; 就会丢失。所以可以在 &lt;code&gt;CREATE SEQUENCE&lt;/code&gt; 的时候用 &lt;code&gt;NOCACHE&lt;/code&gt; 防止这种情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-4-性能&#34;&gt;4.4 性能&lt;/h4&gt;

&lt;p&gt;在数据库操作中，触发器的使用耗费系统资源相对较大。如果对于表容量相对较小的表格我们可以忽略触发器带来的性能影响。&lt;/p&gt;

&lt;p&gt;考虑到大表操作的性能问题，需要尽可能的减少触发器的使用。对于以上操作，就可以抛弃触发器的使用，直接手动调用序列函数即可，但这样可能在程序维护上稍微带来一些不便。&lt;/p&gt;

&lt;h2 id=&#34;三-在-oracle-12c-中设置自增字段&#34;&gt;三、在 Oracle 12c 中设置自增字段&lt;/h2&gt;

&lt;p&gt;在 Oracle 12c 中设置自增字段就简单多了，因为 ORacle 12c 提供了 &lt;code&gt;IDENTITY&lt;/code&gt; 属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE &amp;quot;TEST&amp;quot; (
    ID NUMBER(11) GENERATED BY DEFAULT ON NULL AS IDENTITY,
    NAME VARCHAR2(50BYTE) NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就搞定了！和 MySQL 一样简单！🤣🤣🤣&lt;/p&gt;

&lt;h2 id=&#34;四-总结&#34;&gt;四、总结&lt;/h2&gt;

&lt;p&gt;所以如上所属，在 Oracle 中设置自增字段，需要根据不同的版本使用不同的方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在 Oracle 11g 中，需要先创建序列（SQUENCE）再创建一个触发器（TRIGGER）。&lt;/li&gt;
&lt;li&gt;在 Oracle 12c 中，只需要使用 &lt;code&gt;IDENTITY&lt;/code&gt; 属性就可以了。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issues &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/33&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/33&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>