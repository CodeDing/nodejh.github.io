<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React.Js on nodejh</title>
    <link>http://nodejh.com/tags/react.js/index.xml</link>
    <description>Recent content in React.Js on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/tags/react.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Start React with Webpack</title>
      <link>http://nodejh.com/post/Start-React-with-Webpack/</link>
      <pubDate>Fri, 09 Sep 2016 04:11:13 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Start-React-with-Webpack/</guid>
      <description>

&lt;h2 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/nodejh/start-react-with-webpack react-sample
$ cd react-sample &amp;amp;&amp;amp; npm install
$ npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开浏览器输入 &lt;code&gt;http://localhost:8080&lt;/code&gt;，并尝试随意修改一下 app 目录里面的代码，就能看到效果了。&lt;/p&gt;

&lt;p&gt;为了避免包版本问题导致程序不能运行，根目录下有一个 &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; 文件，这里面所有包的版本都是固定的。 &lt;code&gt;npm install&lt;/code&gt; 时首先会检查在根目录下有没有 &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;，如果 shrinkwrap 文件存在的话，npm 会使用它（而不是 &lt;code&gt;package.json&lt;/code&gt;）来确定安装的各个包的版本号信息。&lt;/p&gt;

&lt;h2 id=&#34;1-安装并配置-webpack&#34;&gt;1. 安装并配置 Webpack&lt;/h2&gt;

&lt;p&gt;首先创建并初始化一个项目目录：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir react-sample &amp;amp;&amp;amp; cd react-sample
$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装 &lt;code&gt;webpack&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i webpack --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后配置 &lt;code&gt;webpack.config.js&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 创建一个 webpack.config.js 文件
$ touch webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- more --&gt;

&lt;p&gt;在该文件中加入下面的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const webpack = require(&#39;webpack&#39;);
const path = require(&#39;path&#39;);

// 定义打包目录路径
const BUILD_DIR = path.resolve(__dirname, &#39;./build&#39;);
// 定义组件目录路径
const APP_DIR = path.resolve(__dirname, &#39;./app&#39;);

const config = {
  entry: `${APP_DIR}/index.jsx`, // 文件打包的入口点
  output: {
    path: BUILD_DIR, // 输出目录的绝对路径
    filename: &#39;bundle.js&#39;, // 输出的每个包的相对路径
  },
  resolve: {
    extensions: [&#39;&#39;, &#39;.js&#39;, &#39;.jsx&#39;], // 开启后缀名的自动补全
  },
};

module.exports = config;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个最基本的 webpack 配置文件。&lt;/p&gt;

&lt;p&gt;接下来在 &lt;code&gt;build/&lt;/code&gt; 目录中创建一个 &lt;code&gt;index.html&lt;/code&gt; 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Start React with Webpack&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot; /&amp;gt;
    &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;./bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-配置加载器-babel-loader&#34;&gt;2. 配置加载器 babel-loader&lt;/h2&gt;

&lt;p&gt;加载器是把一个资源文件作为入参转换为另一个资源文件的 node.js 函数。&lt;/p&gt;

&lt;p&gt;由于我们写 React 的时候使用的是 JSX 语法和 ES6 语法，而浏览器并不完全支持它们。所以需要使用 &lt;a href=&#34;https://github.com/babel/babel-loader&#34;&gt;&lt;code&gt;babel-loader&lt;/code&gt;&lt;/a&gt; 来让 webpack 加载 JSX 和 ES6 的文件。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;babel-loader&lt;/code&gt; 的主要作用如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nodejh.com/images/Start-React-with-Webpack-babel-loader.png&#34; alt=&#34;Babel&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装依赖包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;babel-preset-es2015&lt;/code&gt; 是转换 &lt;code&gt;ES6&lt;/code&gt; 的包；&lt;code&gt;babel-preset-react&lt;/code&gt; 是转换 JSX 的包。&lt;/p&gt;

&lt;p&gt;接下来需要修改 &lt;code&gt;webpack.config.js&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Existing Code ....
const config = {
  // Existing Code ....
  module: {
    loaders: [{
      test: /\.(js|jsx)$/,
      exclude: /(node_modules|bower_components)/,
      loader: &#39;babel-loader&#39;,
      query: {
        presets: [&#39;es2015&#39;, &#39;react&#39;]
      }
    }]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-hello-react&#34;&gt;3. Hello React&lt;/h2&gt;

&lt;p&gt;安装 React：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i react react-dom --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 &lt;code&gt;app&lt;/code&gt; 目录下新建一个 &lt;code&gt;index.jsx&lt;/code&gt; 文件，然后将下面的内容添加到 &lt;code&gt;index.jsx&lt;/code&gt; 中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React from &#39;react&#39;;
import {render} from &#39;react-dom&#39;;

class App extends React.Component {
  render () {
    return &amp;lt;h1&amp;gt; Hello React!&amp;lt;/h1&amp;gt;;
  }
}

render(&amp;lt;App/&amp;gt;, document.getElementById(&#39;app&#39;));

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个时候，执行下面的命令打包：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;webpack -w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-w&lt;/code&gt; 参数表示持续监测项目目录，如果文件发生修改，则重新打包。&lt;/p&gt;

&lt;p&gt;打包完成后，将 &lt;code&gt;build/index.html&lt;/code&gt; 用浏览器打开，就能看到 &lt;code&gt;Hello React!&lt;/code&gt;，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://nodejh.com/images/Start-React-with-Webpack-hello_world.png&#34; alt=&#34;hello_world.png&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-自动刷新和热加载&#34;&gt;4. 自动刷新和热加载&lt;/h2&gt;

&lt;p&gt;懒是第一生产力。每次写完代码，都要重新打包，重新刷新浏览器才能看到结果，显然很麻烦。&lt;/p&gt;

&lt;p&gt;那有没有能够自动刷新浏览器的方法呢？当然有，这个时候就需要 webpack-dev-server 这个包。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install webpack-dev-server -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; 提供了两种自动刷新模式：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iframe 模式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不需要额外配置，只用修改路径&lt;/li&gt;
&lt;li&gt;应用被嵌入了一个 iframe 内部，页面顶部可以展示打包进度信息&lt;/li&gt;
&lt;li&gt;因为 Iframe 的关系，如果应用有多个页面，无法看到当前页面的 URL 信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;inline 模式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;需要添加 &amp;ndash;inline 配置参数&lt;/li&gt;
&lt;li&gt;提示信息在控制台中和浏览器的console中显示&lt;/li&gt;
&lt;li&gt;页面的 URL 改变，可以在浏览器地址栏看见&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来启动 webpack-dev-server：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ webpack-dev-server --inline --hot --content-base ./build/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--hot&lt;/code&gt; 参数就是热加载，即在不刷新浏览器的条件下，应用最新的代码更新。在浏览器中可能看到这样的输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[HMR] Waiting for update signal from WDS...
[WDS] Hot Module Replacement enabled.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--content-base ./&lt;/code&gt; 参数表示将当前目录作为 server 根目录。命令启动后，会在 8080 端口创建一个 HTTP 服务，通过访问 &lt;code&gt;http://localhost:8080/index.html&lt;/code&gt; 就可以访问我们的项目了，并且修改了项目中的代码后，浏览器会自动刷新并实现热加载。&lt;/p&gt;

&lt;p&gt;当然，命令行输入这么长，还是不太方便，所以还有一种更简单的方式，在 &lt;code&gt;package.json&lt;/code&gt; 中配置 webpack develop server：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Existing Code ....
&amp;quot;scripts&amp;quot;: {
    &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --inline --hot --content-base ./build/&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后通过 &lt;code&gt;npm start dev&lt;/code&gt; 来启动即可。&lt;/p&gt;

&lt;h2 id=&#34;5-添加一个新的组件&#34;&gt;5. 添加一个新的组件&lt;/h2&gt;

&lt;p&gt;在 &lt;code&gt;app&lt;/code&gt; 目录中新建一个 &lt;code&gt;AwesomeComponent.jsx&lt;/code&gt; 文件，并添加如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import React, { Component } from &#39;react&#39;;

class AwesomeComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      likesCount: 0
    };
    this.onLike = this.onLike.bind(this);
  }


  onLike() {
    let newLikesCount = this.state.likesCount + 1;
    this.setState({
      likesCount: newLikesCount
    });
  }


  render() {
    return (
      &amp;lt;div&amp;gt;
        Likes: &amp;lt;span&amp;gt;{this.state.likesCount}&amp;lt;/span&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;button onClick={this.onLike}&amp;gt;Like Me&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}


export default AwesomeComponent;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后修改 &lt;code&gt;index.jsx&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ...
import AwesomeComponent from &#39;./AwesomeComponent.jsx&#39;;
// ...
class App extends React.Component {
  render () {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt; Hello React!&amp;lt;/p&amp;gt;
        &amp;lt;AwesomeComponent /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
}

// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://nodejh.com/images/Start-React-with-Webpack-like.png&#34; alt=&#34;like.png&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;update&#34;&gt;UPDATE&lt;/h2&gt;

&lt;h3 id=&#34;2016-10-15&#34;&gt;2016.10.15&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;更新 webpack-dev-server 的配置方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;设置-webpack-dev-server-old&#34;&gt;设置 webpack-dev-server (old)&lt;/h5&gt;

&lt;p&gt;上面我们直接通过浏览器浏览的 &lt;code&gt;html&lt;/code&gt; 文件，接下来我们需要利用 &lt;code&gt;webpack-dev-server&lt;/code&gt; 来创建一个 HTTP Server。&lt;/p&gt;

&lt;p&gt;首先安装 &lt;code&gt;webpack-dev-server&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm i webpack-dev-server --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在 &lt;code&gt;package.json&lt;/code&gt; 的 &lt;code&gt;script&lt;/code&gt; 里面加入 &lt;code&gt;build&lt;/code&gt; 和 &lt;code&gt;dev&lt;/code&gt; 两个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;,
    &amp;quot;dev&amp;quot;: &amp;quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base build&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器&lt;/li&gt;
&lt;li&gt;&amp;ndash;devtool eval - 为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号&lt;/li&gt;
&lt;li&gt;&amp;ndash;progress - 显示合并代码进度&lt;/li&gt;
&lt;li&gt;&amp;ndash;colors - 命令行中显示颜色！&lt;/li&gt;
&lt;li&gt;&amp;ndash;content-base build - 指向设置的输出目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后就可以使用 &lt;code&gt;npm run dev&lt;/code&gt; 的命令来启动项目：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器地址栏输入 &lt;code&gt;localhost:8080&lt;/code&gt; 即可看到页面。&lt;/p&gt;

&lt;p&gt;如果需要浏览器自动刷新，将 &lt;code&gt;webpack.config.js&lt;/code&gt; 中的 &lt;code&gt;entry: APP_DIR + &#39;/index.jsx&lt;/code&gt; 改为下面这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;entry: [
   &#39;webpack-dev-server/client?http://localhost:8080&#39;,
   &#39;webpack/hot/dev-server&#39;,
    APP_DIR + &#39;/index.jsx&#39;
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的话，每次当代码发生变化之后，webpack 会自动重新打包，浏览器也会自动刷新页面。&lt;/p&gt;

&lt;h3 id=&#34;2016-11-19-更新&#34;&gt;2016.11.19 更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用 ES6 语法编写 webpack.config.js&lt;/li&gt;
&lt;li&gt;修改 babel-loader 加载器的配置方法：将添加 &lt;code&gt;.babelrc&lt;/code&gt; 文件改为在 webpack.config.js 中配置&lt;/li&gt;
&lt;li&gt;🐛：webpack-dev-server &amp;ndash;inline &amp;ndash;hot &amp;ndash;content-base ./build/ ➡️ webpack-dev-server &amp;ndash;inline &amp;ndash;hot &amp;ndash;content-base ./build/&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;babel-loader-加载器的配置方法-old&#34;&gt;babel-loader 加载器的配置方法(old)&lt;/h5&gt;

&lt;p&gt;接下来需要配置 babel-loader，告诉 webpack 我们使用了 ES6 和 JSX 插件。先通过touch .babelrc 创建一个名为 .babelrc 的配置文件。然后加入下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;presets&amp;quot; : [&amp;quot;es2015&amp;quot;, &amp;quot;react&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再修改 webpack.config.js，使 webpack 在打包的时候，使用 babel-loader：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Existing Code ....
var config = {
  // Existing Code ....
  module: {
    loaders : [
      {
        test : /\.jsx?/,
        include : APP_DIR,
        loader : &#39;babel&#39;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;自动刷新和热加在的配置-old-wrong&#34;&gt;自动刷新和热加在的配置(old, wrong)&lt;/h5&gt;

&lt;p&gt;当然，命令行输入这么长，还是不太方便，所以还有一种更简单的方式，直接在 &lt;code&gt;webpack.cofig.js&lt;/code&gt; 中配置 webpack develop server：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  entry: {
    // ...      
  },
  // ...
  devServer: {
    hot: true,
    inline: true
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issue: &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/12&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/12&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>