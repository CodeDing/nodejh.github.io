<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Promise on nodejh</title>
    <link>http://nodejh.com/tags/promise/index.xml</link>
    <description>Recent content in Promise on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/tags/promise/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use and Break Promise Chain</title>
      <link>http://nodejh.com/post/Use-and-Stop-Promise-Break-Chain/</link>
      <pubDate>Thu, 24 Nov 2016 22:19:49 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Use-and-Stop-Promise-Break-Chain/</guid>
      <description>

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;本文主要讲的是如何实现 Promise 的链式调用。也就是 &lt;code&gt;promise().then().then().catch()&lt;/code&gt; 的形式，然后讨论如何在某一个 &lt;code&gt;then()&lt;/code&gt; 里面中止 Promise。&lt;/p&gt;

&lt;p&gt;在程序中，只要返回了一个 promise 对象，如果 promise 对象不是 Rejected 或 Fulfilled 状态，then 方法就会继续调用。利用这个特性，可以处理多个异步逻辑。但有时候某个 then 方法的执行结果可能会决定是否需要执行下一个 then，这个时候就需中止 promise，主要思想就是使用 reject 来中止 promise 的 then 继续执行。&lt;/p&gt;

&lt;p&gt;“中止”这个词不知道用得是否准确。这里可能还是 &lt;code&gt;break&lt;/code&gt; 的含义更精确，跳出本次 promise，不继续执行后面的 then 方法。但 promise 依旧会继续执行。&lt;/p&gt;

&lt;h2 id=&#34;can-i-use-promises&#34;&gt;Can I use promises&lt;/h2&gt;

&lt;p&gt;当前浏览器对 Promise 的支持情况见下图：&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://caniuse.com/#search=promise&#34;&gt;http://caniuse.com/#search=promise&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-24-163312.jpg&#34; alt=&#34;caniusepromise&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;promise&#34;&gt;Promise&lt;/h2&gt;

&lt;p&gt;先简单复习一下 Promise。Promise 其实很简单，就是一个处理异步的方法。一般可以通过 &lt;code&gt;new&lt;/code&gt; 方法来调用 &lt;code&gt;Promise&lt;/code&gt; 的构造器实例化一个 promise 对象：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var promise = new Promise((resolve, reject) =&amp;gt; {
    // 异步处理
    // 处理结束后，调用 resolve 或 reject
    //      成功时就调用 resolve
    //      失败时就调用 reject
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用 &lt;code&gt;new Promise&lt;/code&gt; 实例化的 promise 对象有以下三个状态：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;has-resolution&amp;rdquo; - Fulfilled。resolve(成功)时，此时会调用 onFulfilled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;has-rejection&amp;rdquo; - Rejected。reject(失败)时，此时会调用 onRejected&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;unresolved&amp;rdquo; - Pending。既不是resolve也不是reject的状态，也就是promise对象刚被创建后的初始化状态等&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于上面这三种状态的读法，其中左侧为在 ES6 Promises 规范中定义的术语， 而右侧则是在 Promises/A+ 中描述状态的术语。基本上状态在代码中是不会涉及到的，所以名称也无需太在意。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-24-Use-and-Stop-Promise-Chain-promise-states.png&#34; alt=&#34;promise state&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;promise-chain&#34;&gt;Promise Chain&lt;/h2&gt;

&lt;p&gt;先来假设一个业务需求：在系统中使用教务系统账号进行登录。首先用户在登录页面输入用户名（教务系统账号）和密码（教务系统密码）；然后判断数据库中是否存在该用户；如果不存在则使用用户名和密码模拟登录教务系统，如果模拟登录成功，则存储用户名和密码，并返回登录成功。&lt;/p&gt;

&lt;p&gt;听起来就有点复杂对不对？于是画了个流程图来解释整个业务逻辑：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-24-163823.jpg&#34; alt=&#34;flow char&#34; /&gt;&lt;/p&gt;

&lt;p&gt;上图只是一个简化版本，比如密码加密、session设置等没有表现出来，大家知道就好。图中 &lt;code&gt;(1)&lt;/code&gt;、&lt;code&gt;(2)&lt;/code&gt;、&lt;code&gt;(3)&lt;/code&gt; 三个地方就是会进行异步处理的地方，一般数据库操作、网络请求都是异步的。&lt;/p&gt;

&lt;p&gt;如果用传统的回调函数 &lt;code&gt;callback&lt;/code&gt; 来处理上面的逻辑，嵌套的层级就会比较深，上面的业务因为有三个异步操作所以有三层回调，代码大概会是下面的样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 根据 name 查询用户信息
findUserByName(name, function(err, userinfo) {
  if (err) {
    return res.json({
      code: 1000,
      message: &#39;查询用户信息，数据库操作数出现异常&#39;,
    });
  }


  if (userinfo.length &amp;gt; 0) {
  // 用户存在
  if (userinfo[0].pwd === pwd)
    // 密码正确
    return res.json({
      code: 0,
      message: &#39;登录成功&#39;,
    });
  }

  // 数据库中不存在该用户，模拟登录教务系统
  loginEducationSystem(name, pwd, function(err, result) {
    if (err) {
      return res.json({
        code: 1001,
        message: &#39;模拟登录教务系统出现异常&#39;,
      });
    }

    // 约定正确情况下，code 为 0
    if (result.code !== 0) {
      return res.json({
        code: 1002,
        message: &#39;模拟登录教务系统失败，可能是用户名或密码错误&#39;,
      });
    }

    // 模拟登录成功，将用户名密码存入数据库
    saveUserToDB(name, pwd, function(err, result) {
      if (err) {
        return res.json({
          code: 1003,
          message: &#39;将用户名密码存入数据库出现异常&#39;,
        });
      }
      if (result.code !== 0) {
        return res.json({
          code: 1004,
          message: &#39;将用户名密码存入数据库出现异常&#39;,
        });
      }

      return res.json({
        code: 0,
        message: &#39;登录成功!&#39;,
      });
    });
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码可能存在的不优雅之处：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;随着业务逻辑变负责，回调层级会越来越深&lt;/li&gt;
&lt;li&gt;代码耦合度比较高，不易修改&lt;/li&gt;
&lt;li&gt;每一步操作都需要手动进行异常处理，比较麻烦&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来再用 promise 实现此处的业务需求。使用 promise 编码之前，可以先思考两个问题。&lt;/p&gt;

&lt;p&gt;一是如何链式调用，二是如何中止链式调用。&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-promise-chain&#34;&gt;How to Use Promise Chain&lt;/h2&gt;

&lt;p&gt;业务中有三个需要异步处理的功能，所以会分别实例化三个 promise 对象，然后对 promise 进行链式调用。那么，如何进行链式调用？&lt;/p&gt;

&lt;p&gt;其实也很简单，直接在 promise 的 then 方法里面返回另一个 promise 即可。例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function start() {
  return new Promise((resolve, reject) =&amp;gt; {
    resolve(&#39;start&#39;);
  });
}

start()
  .then(data =&amp;gt; {
    // promise start
    console.log(&#39;result of start: &#39;, data);
    return Promise.resolve(1); // p1
  })
  .then(data =&amp;gt; {
    // promise p1
    console.log(&#39;result of p1: &#39;, data);
    return Promise.reject(2); // p2
  })
  .then(data =&amp;gt; {
    // promise p2
    console.log(&#39;result of p2: &#39;, data);
    return Promise.resolve(3); // p3
  })
  .catch(ex =&amp;gt; {
    // promise p3
    console.log(&#39;ex: &#39;, ex);
    return Promise.resolve(4); // p4
  })
  .then(data =&amp;gt; {
    // promise p4
    console.log(&#39;result of p4: &#39;, data);
  });

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码最终会输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result of start:  start
result of p1:  1
ex:  2
result of p4:  4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码的执行逻辑如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://oh1ywjyqf.bkt.clouddn.com/blog/2016-11-24-175131.jpg&#34; alt=&#34;promise chain&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出来，代码的执行逻辑是 &lt;code&gt;promise start --&amp;gt; promise p1 --&amp;gt; promise p3 --&amp;gt; promise p4&lt;/code&gt;。所以结合输出结果和执行逻辑图，总结出以下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;promise 的 then 方法里面可以继续返回一个新的 promise 对象&lt;/li&gt;
&lt;li&gt;下一个 then 方法的参数是上一个 promise 对象的 resolve 参数&lt;/li&gt;
&lt;li&gt;catch 方法的参数是其之前某个 promise 对象的 rejecte 参数&lt;/li&gt;
&lt;li&gt;一旦某个 then 方法里面的 promise 状态改变为了 rejected，则promise 方法连会跳过后面的 then 直接执行 catch&lt;/li&gt;
&lt;li&gt;catch 方法里面依旧可以返回一个新的 promise 对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-to-break-promise-chain&#34;&gt;How to Break Promise Chain&lt;/h2&gt;

&lt;p&gt;接下来就该讨论如何中止 promise 方法链了。&lt;/p&gt;

&lt;p&gt;通过上面的例子，我们可以知道 promise 的状态改变为 rejected 后，promise 就会跳过后面的 then 方法。&lt;/p&gt;

&lt;p&gt;也就是，某个 then 里面发生异常后，就会跳过 then 方法，直接执行 catch。&lt;/p&gt;

&lt;p&gt;所以，当在构造的 promise 方法链中，如果在某个 then 后面，不需要再执行 then 方法了，就可以把它当作一个异常来处理，返回一个异常信息给 catch，其参数可自定义，比如该异常的参数信息为 &lt;code&gt;{ notRealPromiseException: true}&lt;/code&gt;，然后在 catch 里面判断一下 &lt;code&gt;notRealPromiseException&lt;/code&gt; 是否为 &lt;code&gt;true&lt;/code&gt;，如果为 &lt;code&gt;true&lt;/code&gt;，就说明不是程序出现异常，而是在正常逻辑里面中止 then 方法的执行。&lt;/p&gt;

&lt;p&gt;代码大概就这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start()
  .then(data =&amp;gt; {
    // promise start
    console.log(&#39;result of start: &#39;, data);
    return Promise.resolve(1); // p1
    )
  .then(data =&amp;gt; {
    // promise p1
    console.log(&#39;result of p1: &#39;, data);
    return Promise.reject({
      notRealPromiseException: true,
    }); // p2
  })
  .then(data =&amp;gt; {
    // promise p2
    console.log(&#39;result of p2: &#39;, data);
    return Promise.resolve(3); // p3
  })
  .catch(ex =&amp;gt; {
    console.log(&#39;ex: &#39;, ex);
    if (ex.notRealPromiseException) {
      // 一切正常，只是通过 catch 方法来中止 promise chain
      // 也就是中止 promise p2 的执行
      return true;
    }
    // 真正发生异常
    return false;
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的做法可能不符合 &lt;code&gt;catch&lt;/code&gt; 的语义。不过从某种意义上来说，promise 方法链没有继续执行，也可以算是一种“异常”。&lt;/p&gt;

&lt;h2 id=&#34;refactor-callback-with-promise&#34;&gt;Refactor Callback with Promise&lt;/h2&gt;

&lt;p&gt;讲了那么多道理，现在就改来使用 promise 重构之前用回调函数写的异步逻辑了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// 据 name 查询用户信息
const findUserByName = (name, pwd) =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    // 数据库查询操作
    if (dbError) {
      // 数据库查询出错，将 promise 设置为 rejected
      reject({
        code: 1000,
        message: &#39;查询用户信息，数据库操作数出现异常&#39;,
      });
    }
    // 将查询结果赋给 userinfo 变量
    if (userinfo.length === 0) {
      // 数据库中不存在该用户
      resolve();
    }
    // 数据库存在该用户，判断密码是否正确
    if (pwd === userinfo[0].pwd) {
      // 密码正确，中止 promise 执行
      reject({
        notRealPromiseException: true,
        data: {
          code: 0,
          message: &#39;密码正确，登录成功&#39;,
        }
      });
    }
    // 密码不正确，登录失败，将 Promise 设置为 Rejected 状态
    reject({
      code: 1001,
      message: &#39;密码不正确，登录失败&#39;,
    });
  });
};


// 模拟登录教务系统
const loginEducationSystem = (name, pwd) =&amp;gt; {
  // 登录逻辑...
  // 登录成功
  resolve();
  // 登录失败
  reject({
    code: 1002,
    message: &#39;模拟登录教务系统失败&#39;,
  });
};


// 将用户名密码存入数据库
const saveUserToDB(name, pwd) =&amp;gt; {
  // 数据库存储操作
  if (dbError) {
    // 数据库存储出错，将 promise 设置为 rejected
    reject({
      code: 1004,
      message: &#39;数据库存储出错，将出现异常&#39;,
    });
  }
  // 数据库存储操作成功
  resolve();
};


findUserByName(name)
.then(() =&amp;gt; {
  return loginEducationSystem(name, pwd);
})
.then(() =&amp;gt; {
  return saveUserToDB(name, pwd);
})
.catch(e =&amp;gt; {
  // 判断异常出现原因
  if (e.notRealPromiseException) {
    // 正常中止 promise 而故意设置的异常
    return res.json(e.data);
  }
  // 出现错误或异常
  return res.json(e);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在上面的代码中，实例化了三个 promise 对象，分别实现业务需求中的三个功能。然后通过 promise 方法链来调用。相比用回调函数而言，代码结构更加清晰，也更易读易懂耦合度更低更易扩展了。&lt;/p&gt;

&lt;h2 id=&#34;promise-all-promise-race&#34;&gt;Promise.all &amp;amp;&amp;amp; Promise.race&lt;/h2&gt;

&lt;p&gt;仔细观察可以发现，在上面的 promise 代码中，&lt;code&gt;loginEducationSystem&lt;/code&gt; 和 &lt;code&gt;saveUserToDB&lt;/code&gt; 两个方法执行有先后顺序要求，但没有数据传递。&lt;/p&gt;

&lt;p&gt;其实 promise 方法链更好用的一点是，当下一个操作依赖于上一个操作的结果的时候，可以很方便地通过 then 方法的参数来传递数据。前面页提到过，下一个 then 方法的参数就是上一个 then 方法里面 &lt;code&gt;resolve&lt;/code&gt; 的参数，所以当然就可以把上一个 then 方法的执行结果作为参数传递给下一个 then 方法了。&lt;/p&gt;

&lt;p&gt;还有些时候，可能 then 方法的执行顺序也没有太多要求，只需要 promise 方法链中的两个或多个 promise 全部都执行正确。这时，如果依旧一个一个去写 then 可能就比较麻烦，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function p1() {
  return new Promise((resolve) =&amp;gt; {
    console.log(1);
    resolve();
  });
}

function p2() {
  return new Promise((resolve) =&amp;gt; {
    console.log(2);
    resolve();
  });
}

function p3() {
  return new Promise((resolve) =&amp;gt; {
    console.log(3);
    resolve();
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在只需要 &lt;code&gt;p1&lt;/code&gt; &lt;code&gt;p2&lt;/code&gt;  &lt;code&gt;p3&lt;/code&gt; 这三个 promise 都执行，并且 promise 最终状态都是 Fulfilled，那么如果还是使用方法链，这是这样调用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p1()
.then(() =&amp;gt; {
  return p2();
})
.then(() =&amp;gt; {
  return p3();
})
.then(() =&amp;gt; {
  console.log(&#39;all done&#39;);
})
.catch(e =&amp;gt; {
  console.log(&#39;e: &#39;, e);
});

// 输出结果：
// 1
// 2
// 3
// all done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代码貌似就不那么精炼了。这个时候就有了 &lt;code&gt;Promise.all&lt;/code&gt; 这个方法。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt; 接收一个 promise对象的数组作为参数，当这个数组里的所有 promise 对象全部变为 resolve 或 reject 状态的时候，它才会去调用 &lt;code&gt;then&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;于是，调用这几个 promise 的代码就可以这样写了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;p1()
.then(() =&amp;gt; {
  return Promise.all([
    p2(),
    p3(),
  ]);
})
.then(() =&amp;gt; {
  console.log(&#39;all done&#39;);
})
.catch((e) =&amp;gt; {
  console.log(&#39;e: &#39;, e);
});

// 输出结果：
// 1
// 2
// 3
// all done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样看起来貌似就精炼些了。&lt;/p&gt;

&lt;p&gt;而对于 &lt;code&gt;Promise.race&lt;/code&gt;，其参数也跟 &lt;code&gt;Promise.all&lt;/code&gt; 一样是一个数组。只是数组中的任何一个 promise 对象如果变为 resolve 或者reject 的话，该函数就会返回，并使用这个 promise 对象的值进行 resolve 或者 reject。&lt;/p&gt;

&lt;p&gt;这里就不举例了。&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;到目前为止，我们就基本了解了 Promise 的用法及特点，并实现用 Promise 重构用回调函数写的异步操作。现在对 Promise 的使用，应该驾轻就熟了。&lt;/p&gt;

&lt;p&gt;完。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issue: &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/23&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/23&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>