<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Express on nodejh</title>
    <link>http://nodejh.com/tags/express/</link>
    <description>Recent content in Express on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 15 Oct 2016 06:46:05 +0800</lastBuildDate>
    <atom:link href="http://nodejh.com/tags/express/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Check Parameters in Express Router</title>
      <link>http://nodejh.com/post/Check-Parameters-in-Express-Router/</link>
      <pubDate>Sat, 15 Oct 2016 06:46:05 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Check-Parameters-in-Express-Router/</guid>
      <description>

&lt;p&gt;本文以 Express 框架为基础，讲诉如何通过一个中间件来检测 Express 路由中传输的参数是否合法。&lt;/p&gt;

&lt;p&gt;几乎对于任何应用，前后端都需要进行传输数据。不管是通过 HTTP 请求的 POST 方法还是 GET 方法，数据校验都是必要的操作。&lt;/p&gt;

&lt;p&gt;对于大部分 API 来说，可能只需要判断传入的参数是否为 undefined 或 null，所以这个时候，为了减少重复代码，我们可以写一个简单的中间件来处理路由中的参数。&lt;/p&gt;

&lt;p&gt;这个中间件的需求如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检测路由中的一般参数是否为 undefined、null、[]、&amp;rdquo;&lt;/li&gt;
&lt;li&gt;中间件同时还需要能对特殊参数做处理，如一个参数值在 1-100 之间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终写出来的处理参数的模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * 检测路由中的参数
 * @method checkParameters
 * @param  {object}        req     http请求
 * @param  {object}        res     http响应
 * @param  {Function}      next    
 * @param  {[type]}        special 特殊参数，
 *                                 格式： [{eval: &#39;req.query.id&amp;gt;0&#39;, key:&#39;id&#39;, type: &#39;query&#39;}]
 *                                 key 属性的值必须和eval中对应，且type只能是 query/params/body
 * @return {object}        若参数错误，直接返回json到前端；正确，则next()
 */
function checkParameters(req, res, next, special) {
  // console.log(&#39;params: &#39;, req.params);
  // console.log(&#39;body: &#39;, req.body);
  // console.log(&#39;query: &#39;, req.query);
  console.log(&#39;specialParams: &#39;, typeof special);
  // 判断是否传入第四个参数
  if (Array.isArray(special)) {
    // 判断特殊参数
    for (let i = 0; i &amp;lt; special.length; i++) {
      // console.log(&#39;special[i]: &#39;, special[i]);
      // console.log(&#39;special[i] eval: &#39;, special[i].hasOwnProperty(&#39;eval&#39;));
      // console.log(&#39;special[i] key: &#39;, special[i].hasOwnProperty(&#39;key&#39;));
      // console.log(&#39;special[i] type: &#39;, special[i].hasOwnProperty(&#39;type&#39;));

      // 判断是否具有 eval, key, type 三个参数
      if (! (special[i].hasOwnProperty(&#39;eval&#39;)
        &amp;amp;&amp;amp; special[i].hasOwnProperty(&#39;key&#39;)
        &amp;amp;&amp;amp; special[i].hasOwnProperty(&#39;type&#39;))) {
        return res.json({
          code: 90001,
          msg: &#39;检测参数属否正确时，传入的特殊参数格式不完全&#39;,
          detail: special
        });
      }
      // 判断 eval, key, type 三个参数是否为 undefined
      if ( !(typeof special[i][&#39;eval&#39;] !== undefined
      &amp;amp;&amp;amp; typeof special[i][&#39;key&#39;] !== undefined
      &amp;amp;&amp;amp; typeof special[i][&#39;type&#39;] !== undefined)) {
        return res.json({
          code: 90002,
          msg: &#39;检测参数属否正确时，传入的特殊参数为 undefined&#39;,
          detail: special
        });
      }
      const evalString = special[i][&#39;eval&#39;];
      const type = special[i][&#39;type&#39;];
      const key = special[i][&#39;key&#39;];
      // 判断 key 和 eval 是否匹配
      console.log(&#39;length: &#39;, evalString
      .split(&#39;req.&#39; + type + &#39;.&#39; + key)
      .length);
      const length = evalString.split(&#39;req.&#39; + type + &#39;.&#39; + key).length;
      if (length &amp;lt; 1) {
        return res.json({
          code: 90003,
          msg: &#39;检测参数属否正确时，传入的特殊参数为格式不正确&#39;,
          detail: special
        });
      }
      // 执行 eval
      if (!eval(evalString)) {
        return res.json({
          code: 90004,
          msg: &#39;检测参数属否正确时，参数不匹配传入的条件 &#39; + evalString,
          detail: special,
          parameters: req[type]
        });
      }
      // 从普通参数中删除特殊参数
      // console.log(&#39;delete: &#39;, req[type][key]);
      delete req[type][key];
    }
  }

  const params = req.params;
  // 去掉 req.params 中 {&#39;0&#39;: &#39;&#39;, ...} 这一项
  delete params[&#39;0&#39;];
  // console.log(&#39;params: &#39;, params);
  const body = req.body;
  const query = req.query;
  const common = Object.assign(params, body, query);
  console.log(&#39;common: &#39;, common);
  // 检测参数属否为undefined
  for (let i in common) {
    if (typeof common[i] === &#39;undefined&#39;) {
      return res.json({
        code: 90005,
        msg: &#39;检测参数属否正确时，&#39; + i + &#39; 参数为undefined&#39;,
        detail: common
      });
    }
    // 检测参数属否为null
    if (common[i] === null) {
      return res.json({
        code: 90006,
        msg: &#39;检测参数属否正确时，&#39; + i + &#39; 参数为null&#39;,
        detail: common
      });
    }
    // 检测参数是否为空字符串 &#39;&#39;
    if (common[i] === &#39;&#39;) {
      return res.json({
        code: 90007,
        msg: &#39;检测参数属否正确时，&#39; + i + &#39; 参数为空字符串&#39;,
        detail: common
      });
    }
    // 检测参数是否为空数组 []
    if (common[i] === &#39;&#39;) {
      return res.json({
        code: 90008,
        msg: &#39;检测参数属否正确时，&#39; + i + &#39; 参数为空数组&#39;,
        detail: common
      });
    }
  }

  return next();
}

module.exports = checkParameters;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;函数详解&#34;&gt;函数详解&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. 特殊参数的处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个模块，首先对特殊参数做处理。&lt;code&gt;special&lt;/code&gt; 这个参数是一个数组，格式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[{
  eval: &#39;parseInt(req.query.id) &amp;gt; 1 &amp;amp;&amp;amp; parseInt(req.query.id) &amp;lt; 10&#39;,
  key: &#39;id&#39;,
  type: &#39;query&#39;
}, {
  eval: &#39;parseInt(req.query.age) === 11&#39;,
  key: &#39;age&#39;,
  type: &#39;query&#39;
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;key 属性的值必须和eval中对应，且type只能是 query/params/body。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;首先判断函数是否传入第四个参数，并且第四个参数是否为数组，如果这两个条件成立，说明有特殊参数需要处理。&lt;/li&gt;
&lt;li&gt;然后判断是否具有 eval, key, type 三个参数。eval 参数是一个参数条件表达式，如 &amp;lsquo;id&amp;gt;0&amp;rsquo;，最终通过 &lt;code&gt;eval()&lt;/code&gt; 函数来执行这个表达式。&lt;code&gt;key&lt;/code&gt; 表示参数属性名，type 表示是通过何种方式传递的参数，如 query/params/body。&lt;/li&gt;
&lt;li&gt;接下来判断  eval, key, type 三个参数自身是否为 undefined 或 null&lt;/li&gt;
&lt;li&gt;再然后判断 判断 key 和 eval 是否匹配。key 和 eval 的匹配，主要是为了后面从一般参数中删除特殊参数&lt;/li&gt;
&lt;li&gt;再执行 eval 表达式，判断表达式是否成立，即特殊参数值是否合法&lt;/li&gt;
&lt;li&gt;如果以上都为真，说明特殊参数合法，最后则使用 delete 从参数中删除特殊参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 普通参数处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;处理完毕特殊参数后，就需要处理普通参数。普通参数只需要满足：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;不为 &lt;code&gt;undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不为 &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不为空字符串 &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不为空数组 &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;普通参数，即 &lt;code&gt;req.body&lt;/code&gt; &lt;code&gt;req.params&lt;/code&gt; &lt;code&gt;req.query&lt;/code&gt; 中的所有非特殊参数。&lt;/p&gt;

&lt;p&gt;除了在判断特殊参数的时候，需要 delete 特殊参数，还需要 &lt;code&gt;delete req.params[&#39;0&#39;]&lt;/code&gt;。因为对于 &lt;code&gt;req.params&lt;/code&gt;，当 URL 没有 &lt;code&gt;path&lt;/code&gt; 部分的时候，&lt;code&gt;req.params[&#39;0&#39;]&lt;/code&gt; 为 &lt;code&gt;&#39;&#39;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;处理完毕之后，若所有参数都合法，则返回 &lt;code&gt;next()&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&#34;模块使用&#34;&gt;模块使用&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. 创建没有挂载路径的中间件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先在 Express 项目入口文件，创建一个参数处理中间件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// app.js
const checkParameters = require(&#39;./checkParameters&#39;);
// ...
app.use(function(req, res, next) {
  checkParameters(req, res, next);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意这里的 &lt;code&gt;app.use()&lt;/code&gt; 需要放在创建具体路由中间件如&lt;code&gt;app.use(&#39;/&#39;, index)&lt;/code&gt; 之前。&lt;/p&gt;

&lt;p&gt;当 Express 接收到 HTTP 请求后，首先该中间件会检测参数是否合法（只判断是否为 null 或 undefine 或 &amp;ldquo; 或 []）。如果不合法，则直接返回；如果合法，则程序继续执行，由匹配该请求路径的路由继续完成该请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 创建挂载路径的中间件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果需要对某个路由的特殊参数做处理，则需要创建一个挂载路径的中间件。&lt;/p&gt;

&lt;p&gt;比如为们要判断 &lt;code&gt;/index&lt;/code&gt; 路由的 GET 请求中的 &lt;code&gt;id&lt;/code&gt; 参数，其中 &lt;code&gt;id&lt;/code&gt; 的取值范围是 1-100，URL 形式如 &lt;code&gt;http://localhost:3000/index?id=10&lt;/code&gt;，则可以这样使用该模块：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// index.js
const checkParameters = require(&#39;./checkParameters&#39;);

// 挂载路径的中间件
router.get(&#39;/index&#39;, function(req, res, next) {
  const special = {
    eval: &#39;parseInt(req.query.id) &amp;gt;= 1 &amp;amp;&amp;amp; parseInt(req.query.id) &amp;lt;= 100&#39;,
    key: &#39;id&#39;,
    type: &#39;query&#39;
  };
  checkParameters(req, res, next, special);
});
// 正常逻辑处理
router.get(&#39;/index&#39;, function(req, res, next) {
  // 正常逻辑
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当 Express 接收到一个 HTTP 请求的时候，首先还是没有挂载路径的中间件先处理请求，检测参数；然后该挂载路径的中间件再检测参数；最后才执行正常处理逻辑。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issue: &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/5&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/5&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>