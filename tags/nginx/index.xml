<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on nodejh</title>
    <link>http://nodejh.com/tags/nginx/index.xml</link>
    <description>Recent content in Nginx on nodejh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <atom:link href="http://nodejh.com/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Use Nginx Reverse Proxy Node.js</title>
      <link>http://nodejh.com/post/Use-Nginx-Reverse-Proxy-Nodejs/</link>
      <pubDate>Sat, 30 Apr 2016 17:19:20 +0800</pubDate>
      
      <guid>http://nodejh.com/post/Use-Nginx-Reverse-Proxy-Nodejs/</guid>
      <description>&lt;p&gt;一般来说使用 node.js 开发的 webapp 都不会是默认的80端口，以官方文档演示为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const http = require(&#39;http&#39;);

const hostname = &#39;127.0.0.1&#39;;
const port = 3000;

const server = http.createServer((req, res) =&amp;gt; {
  res.statusCode = 200;
  res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);
  res.end(&#39;Hello World\n&#39;);
});

server.listen(port, hostname, () =&amp;gt; {
  console.log(`Server running at http://${hostname}:${port}/`);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;该例子使用的是 3000 端口，需要像 &lt;code&gt;localhost:3000&lt;/code&gt; 这样，域名（或IP）加上 &lt;code&gt;:port&lt;/code&gt; 才能访问。而一般 Web 应用都是监听的 80 端口。而普通应用一般只能监听 &lt;code&gt;1024&lt;/code&gt; 以上的端口号，监听 80 端口需要 root 权限。而且 node.js 监听了 80 端口后，像 nginx 这类 HTTP Server 就只能选择监听其他端口了。&lt;/p&gt;

&lt;p&gt;所以一般不使用 node.js 直接监听 80 端口，而是通过 nginx 来做反向代理。&lt;/p&gt;

&lt;p&gt;Nginx 的具体配置如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
upstream nodejs {
    server 127.0.0.1:3000;
    keepalive 64;
}

server {
    listen 80;
    # server_name 后面是域名，这里以 www.domain.com 为例
    server_name www.domain.com;
    # 日志
    access_log /var/log/nginx/test.log;
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host  $http_host;
        proxy_set_header X-Nginx-Proxy true;
        proxy_set_header Connection &amp;quot;&amp;quot;;
        proxy_pass http://nodejs;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;Github Issue: &lt;a href=&#34;https://github.com/nodejh/nodejh.github.io/issues/14&#34;&gt;https://github.com/nodejh/nodejh.github.io/issues/14&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>